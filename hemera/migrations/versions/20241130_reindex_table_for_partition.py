"""add_address_index_and_stats

Revision ID: 32d48a69b401
Revises: 3bd2e3099bae
Create Date: 2024-11-28 18:48:59.071234

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "32d48a69b401"
down_revision: Union[str, None] = "3bd2e3099bae"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("logs_pkey", "logs", type_="primary")
    op.create_primary_key(
        "logs_pkey",
        "logs",
        ["transaction_hash", "block_timestamp", "block_hash", "log_index"],
    )

    op.create_table(
        "af_eigen_layer_address_current",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("strategy", postgresql.BYTEA(), nullable=False),
        sa.Column("token", postgresql.BYTEA(), nullable=True),
        sa.Column("deposit_amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("start_withdraw_amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("finish_withdraw_amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address", "strategy"),
        if_not_exists=True,
    )
    op.create_table(
        "af_eigen_layer_records",
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=False),
        sa.Column("log_index", sa.INTEGER(), nullable=False),
        sa.Column("internal_idx", sa.INTEGER(), nullable=False),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("method", sa.VARCHAR(), nullable=True),
        sa.Column("event_name", sa.VARCHAR(), nullable=True),
        sa.Column("strategy", postgresql.BYTEA(), nullable=True),
        sa.Column("token", postgresql.BYTEA(), nullable=True),
        sa.Column("staker", postgresql.BYTEA(), nullable=True),
        sa.Column("shares", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("withdrawer", postgresql.BYTEA(), nullable=True),
        sa.Column("withdrawroot", postgresql.BYTEA(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.PrimaryKeyConstraint("transaction_hash", "log_index", "internal_idx"),
        if_not_exists=True,
    )
    op.create_table(
        "af_karak_address_current",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("vault", postgresql.BYTEA(), nullable=False),
        sa.Column("deposit_amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("start_withdraw_amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("finish_withdraw_amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("d_s", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("d_f", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("s_f", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address", "vault"),
        if_not_exists=True,
    )
    op.create_table(
        "af_karak_records",
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=False),
        sa.Column("log_index", sa.INTEGER(), nullable=False),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("method", sa.VARCHAR(), nullable=True),
        sa.Column("event_name", sa.VARCHAR(), nullable=True),
        sa.Column("topic0", sa.VARCHAR(), nullable=True),
        sa.Column("from_address", postgresql.BYTEA(), nullable=True),
        sa.Column("to_address", postgresql.BYTEA(), nullable=True),
        sa.Column("token", sa.VARCHAR(), nullable=True),
        sa.Column("vault", postgresql.BYTEA(), nullable=True),
        sa.Column("amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("balance", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("staker", sa.VARCHAR(), nullable=True),
        sa.Column("operator", sa.VARCHAR(), nullable=True),
        sa.Column("withdrawer", sa.VARCHAR(), nullable=True),
        sa.Column("shares", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("withdrawroot", sa.VARCHAR(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.PrimaryKeyConstraint("transaction_hash", "log_index"),
        if_not_exists=True,
    )
    op.create_table(
        "af_karak_vault_token",
        sa.Column("vault", postgresql.BYTEA(), nullable=False),
        sa.Column("token", postgresql.BYTEA(), nullable=False),
        sa.Column("name", sa.VARCHAR(), nullable=True),
        sa.Column("symbol", sa.VARCHAR(), nullable=True),
        sa.Column("asset_type", sa.INTEGER(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("vault", "token"),
        if_not_exists=True,
    )
    op.create_table(
        "af_project_contracts",
        sa.Column("project_id", sa.VARCHAR(), nullable=True),
        sa.Column("chain_id", sa.INTEGER(), nullable=True),
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("deployer", postgresql.BYTEA(), nullable=True),
        sa.Column("transaction_from_address", postgresql.BYTEA(), nullable=True),
        sa.Column("trace_creator", postgresql.BYTEA(), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.PrimaryKeyConstraint("address"),
        if_not_exists=True,
    )
    op.create_table(
        "af_projects",
        sa.Column("project_id", sa.VARCHAR(), nullable=False),
        sa.Column("name", sa.VARCHAR(), nullable=True),
        sa.Column("deployer", postgresql.BYTEA(), nullable=False),
        sa.Column("address_type", sa.INTEGER(), nullable=True, comment="0是作为deploy地址不参与统计；1参与统计"),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("project_id", "deployer"),
        if_not_exists=True,
    )
    op.create_table(
        "cyber_address",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("name", sa.VARCHAR(), nullable=True),
        sa.Column("reverse_node", postgresql.BYTEA(), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address"),
        if_not_exists=True,
    )
    op.create_table(
        "cyber_id_record",
        sa.Column("node", postgresql.BYTEA(), nullable=False),
        sa.Column("token_id", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("label", sa.VARCHAR(), nullable=True),
        sa.Column("registration", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("address", postgresql.BYTEA(), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("cost", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("node"),
        if_not_exists=True,
    )
    op.create_table(
        "nft_details",
        sa.Column("token_address", sa.LargeBinary(), nullable=False),
        sa.Column("token_id", sa.Numeric(precision=100), nullable=False),
        sa.Column("token_owner", sa.LargeBinary(), nullable=True),
        sa.Column("token_supply", sa.Numeric(precision=78), nullable=True),
        sa.Column("token_uri", sa.String(), nullable=True),
        sa.Column("token_uri_info", sa.JSON(), nullable=True),
        sa.Column("block_number", sa.BigInteger(), nullable=True),
        sa.Column("block_timestamp", sa.DateTime(), nullable=True),
        sa.Column("create_time", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("update_time", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("reorg", sa.Boolean(), server_default=sa.text("false"), nullable=False),
        sa.PrimaryKeyConstraint("token_address", "token_id", name="pk_nft_details"),
        if_not_exists=True,
    )
    op.create_index(
        "idx_nft_details_owner",
        "nft_details",
        [sa.text("token_owner DESC"), "token_address", "token_id"],
        unique=False,
        if_not_exists=True,
    )
    op.create_table(
        "nft_owner_changes",
        sa.Column("token_address", sa.LargeBinary(), nullable=False),
        sa.Column("token_id", sa.Numeric(precision=100), nullable=False),
        sa.Column("block_number", sa.BigInteger(), nullable=False),
        sa.Column("token_owner", sa.LargeBinary(), nullable=True),
        sa.Column("block_timestamp", sa.DateTime(), nullable=True),
        sa.Column("create_time", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("update_time", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("reorg", sa.Boolean(), server_default=sa.text("false"), nullable=False),
        sa.PrimaryKeyConstraint("token_address", "token_id", "block_number", name="pk_nft_owner_changes"),
        if_not_exists=True,
    )
    op.create_index(
        "idx_nft_owner_token_block",
        "nft_owner_changes",
        ["token_address", "token_id", sa.text("block_timestamp DESC"), sa.text("block_number DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.drop_table("af_index_token_address_stats", if_exists=True)
    op.drop_table("period_wallet_addresses_aggregates", if_exists=True)
    op.drop_table("erc721_token_mint", if_exists=True)
    op.drop_index("erc721_change_address_id_number_desc_index", table_name="erc721_token_id_changes", if_exists=True)
    op.drop_table("erc721_token_id_changes", if_exists=True)
    op.alter_column("address_coin_balances", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column(
        "address_coin_balances",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_coin_balances",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_coin_balances",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=False,
        existing_server_default=sa.text("false"),
    )
    op.drop_index("coin_balance_address_number_desc_index", table_name="address_coin_balances", if_exists=True)
    op.create_index(
        "idx_coin_balances_address_block",
        "address_coin_balances",
        [sa.text("address DESC"), sa.text("block_timestamp DESC"), sa.text("block_number DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_contract_operations",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_contract_operations",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(
        "address_contract_operations_address_block_tn_t_idx", table_name="address_contract_operations", if_exists=True
    )
    op.create_index(
        "idx_contract_ops_address_time",
        "address_contract_operations",
        ["address", sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_current_token_balances",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_current_token_balances",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_current_token_balances",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=False,
        existing_server_default=sa.text("false"),
    )
    op.drop_index(
        "current_token_balances_token_address_balance_of_index",
        table_name="address_current_token_balances",
        if_exists=True,
    )
    op.drop_index(
        "current_token_balances_token_address_id_balance_of_index",
        table_name="address_current_token_balances",
        if_exists=True,
    )
    op.create_index(
        "idx_token_balances_token_balance",
        "address_current_token_balances",
        ["token_address", "token_id", sa.text("balance DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_internal_transactions",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_internal_transactions",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(
        "address_internal_transactions_address_nt_t_idx", table_name="address_internal_transactions", if_exists=True
    )
    op.create_index(
        "idx_internal_txs_address_time",
        "address_internal_transactions",
        ["address", sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_nft_1155_holders",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_nft_1155_holders",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(
        "address_nft_1155_holders_token_address_balance_of_idx", table_name="address_nft_1155_holders", if_exists=True
    )
    op.create_index(
        "idx_nft_1155_holders_token_balance",
        "address_nft_1155_holders",
        ["token_address", "token_id", sa.text("balance_of DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_nft_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_nft_transfers",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("address_token_balances", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column(
        "address_token_balances",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_token_balances",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_token_balances",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=False,
        existing_server_default=sa.text("false"),
    )
    op.drop_index("token_balance_address_id_number_index", table_name="address_token_balances", if_exists=True)
    op.create_index(
        "idx_token_balances_addr_token_block",
        "address_token_balances",
        [
            "address",
            "token_address",
            sa.text("token_id DESC"),
            sa.text("block_timestamp DESC"),
            sa.text("block_number DESC"),
        ],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_token_holders",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_token_holders",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(
        "address_token_holders_token_address_balance_of_idx", table_name="address_token_holders", if_exists=True
    )
    op.create_index(
        "idx_token_holders_balance",
        "address_token_holders",
        ["token_address", sa.text("balance_of DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_token_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_token_transfers",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_transactions",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_transactions",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(
        "address_transactions_address_block_timestamp_block_number_t_idx",
        table_name="address_transactions",
        if_exists=True,
    )
    op.drop_index(
        "address_transactions_address_txn_type_block_timestamp_block_idx",
        table_name="address_transactions",
        if_exists=True,
    )
    op.create_index(
        "idx_addr_txs_time",
        "address_transactions",
        ["address", sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "idx_addr_txs_type_time",
        "address_transactions",
        [
            "address",
            "txn_type",
            sa.text("block_timestamp DESC"),
            sa.text("block_number DESC"),
            sa.text("transaction_index DESC"),
        ],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "af_index_daily_stats",
        "transaction_in_value",
        existing_type=sa.BIGINT(),
        type_=sa.Numeric(),
        existing_nullable=True,
    )
    op.alter_column(
        "af_index_daily_stats",
        "transaction_out_value",
        existing_type=sa.BIGINT(),
        type_=sa.Numeric(),
        existing_nullable=True,
    )
    op.alter_column(
        "af_index_daily_stats",
        "transaction_self_value",
        existing_type=sa.BIGINT(),
        type_=sa.Numeric(),
        existing_nullable=True,
    )
    op.alter_column(
        "af_index_daily_stats",
        "internal_transaction_in_value",
        existing_type=sa.BIGINT(),
        type_=sa.Numeric(),
        existing_nullable=True,
    )
    op.alter_column(
        "af_index_daily_stats",
        "internal_transaction_out_value",
        existing_type=sa.BIGINT(),
        type_=sa.Numeric(),
        existing_nullable=True,
    )
    op.alter_column(
        "af_index_daily_stats",
        "internal_transaction_self_value",
        existing_type=sa.BIGINT(),
        type_=sa.Numeric(),
        existing_nullable=True,
    )
    op.add_column("af_index_token_address_daily_stats", sa.Column("block_date", sa.DateTime(), nullable=False))
    op.alter_column(
        "af_index_token_address_daily_stats", "update_time", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.alter_column(
        "all_feature_value_records",
        "value",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.JSON(),
        existing_nullable=True,
    )
    op.alter_column(
        "all_feature_value_records",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "all_feature_value_records",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(
        "all_feature_value_records_feature_block_index", table_name="all_feature_value_records", if_exists=True
    )
    op.create_index(
        "idx_feature_value_block",
        "all_feature_value_records",
        ["feature_id", sa.text("block_number DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.drop_index("block_ts_mapper_idx", table_name="block_ts_mapper", if_exists=True)
    op.create_index(
        "idx_block_ts_mapper_number",
        "block_ts_mapper",
        [sa.text("block_number DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "blocks",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "blocks",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "blocks", "reorg", existing_type=sa.BOOLEAN(), nullable=False, existing_server_default=sa.text("false")
    )
    op.drop_index(
        "blocks_hash_unique_when_not_reorg", table_name="blocks", postgresql_where="(reorg = false)", if_exists=True
    )
    op.drop_index("blocks_number_index", table_name="blocks", if_exists=True)
    op.drop_index(
        "blocks_number_unique_when_not_reorg", table_name="blocks", postgresql_where="(reorg = false)", if_exists=True
    )
    op.drop_index("blocks_timestamp_index", table_name="blocks", if_exists=True)
    op.create_index(
        "idx_blocks_hash_no_reorg",
        "blocks",
        ["hash"],
        unique=True,
        postgresql_where=sa.text("reorg = false"),
        if_not_exists=True,
    )
    op.create_index("idx_blocks_number", "blocks", [sa.text("number DESC")], unique=False, if_not_exists=True)
    op.create_index(
        "idx_blocks_number_no_reorg",
        "blocks",
        ["number"],
        unique=True,
        postgresql_where=sa.text("reorg = false"),
        if_not_exists=True,
    )
    op.create_index("idx_blocks_timestamp", "blocks", [sa.text("timestamp DESC")], unique=False, if_not_exists=True)
    op.alter_column(
        "contract_internal_transactions", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.alter_column(
        "contract_internal_transactions",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "contract_internal_transactions",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "contract_internal_transactions",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=False,
        existing_server_default=sa.text("false"),
    )
    op.drop_index(
        "contract_internal_transactions_transaction_hash_idx",
        table_name="contract_internal_transactions",
        if_exists=True,
    )
    op.drop_index(
        "internal_transactions_block_number_index", table_name="contract_internal_transactions", if_exists=True
    )
    op.drop_index(
        "internal_transactions_from_address_number_transaction_index",
        table_name="contract_internal_transactions",
        if_exists=True,
    )
    op.drop_index(
        "internal_transactions_number_transaction_index", table_name="contract_internal_transactions", if_exists=True
    )
    op.drop_index(
        "internal_transactions_to_address_number_transaction_index",
        table_name="contract_internal_transactions",
        if_exists=True,
    )
    op.create_index(
        "idx_internal_txs_block_number",
        "contract_internal_transactions",
        [sa.text("block_timestamp DESC"), sa.text("block_number DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "idx_internal_txs_from_addr_block_tx",
        "contract_internal_transactions",
        [
            "from_address",
            sa.text("block_timestamp DESC"),
            sa.text("block_number DESC"),
            sa.text("transaction_index DESC"),
        ],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "idx_internal_txs_to_addr_block_tx",
        "contract_internal_transactions",
        [
            "to_address",
            sa.text("block_timestamp DESC"),
            sa.text("block_number DESC"),
            sa.text("transaction_index DESC"),
        ],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "idx_internal_txs_transaction_hash",
        "contract_internal_transactions",
        ["transaction_hash"],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "contracts",
        "social_list",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.JSON(),
        existing_nullable=True,
    )
    op.alter_column(
        "contracts",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "contracts",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "contracts", "reorg", existing_type=sa.BOOLEAN(), nullable=False, existing_server_default=sa.text("false")
    )
    op.alter_column("erc1155_token_transfers", "block_number", existing_type=sa.BIGINT(), nullable=False)
    op.alter_column("erc1155_token_transfers", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column(
        "erc1155_token_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "erc1155_token_transfers",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "erc1155_token_transfers",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=False,
        existing_server_default=sa.text("false"),
    )
    op.drop_index(
        "erc1155_token_transfers_from_address_number_log_index_index",
        table_name="erc1155_token_transfers",
        if_exists=True,
    )
    op.drop_index("erc1155_token_transfers_number_log_index", table_name="erc1155_token_transfers", if_exists=True)
    op.drop_index(
        "erc1155_token_transfers_to_address_number_log_index_index",
        table_name="erc1155_token_transfers",
        if_exists=True,
    )
    op.drop_index(
        "erc1155_token_transfers_token_address_from_index", table_name="erc1155_token_transfers", if_exists=True
    )
    op.drop_index(
        "erc1155_token_transfers_token_address_id_index", table_name="erc1155_token_transfers", if_exists=True
    )
    op.drop_index(
        "erc1155_token_transfers_token_address_number_log_index_index",
        table_name="erc1155_token_transfers",
        if_exists=True,
    )
    op.drop_index(
        "erc1155_token_transfers_token_address_to_index", table_name="erc1155_token_transfers", if_exists=True
    )
    op.create_index(
        "idx_erc1155_transfers_block_log",
        "erc1155_token_transfers",
        [sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "idx_erc1155_transfers_token_id",
        "erc1155_token_transfers",
        [
            "token_address",
            "token_id",
            sa.text("block_timestamp DESC"),
            sa.text("block_number DESC"),
            sa.text("log_index DESC"),
        ],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "idx_erc1155_transfers_token_time",
        "erc1155_token_transfers",
        ["token_address", sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column("erc20_token_transfers", "block_number", existing_type=sa.BIGINT(), nullable=False)
    op.alter_column("erc20_token_transfers", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column(
        "erc20_token_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "erc20_token_transfers",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "erc20_token_transfers",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=False,
        existing_server_default=sa.text("false"),
    )
    op.drop_index(
        "erc20_token_transfers_from_address_number_log_index_index", table_name="erc20_token_transfers", if_exists=True
    )
    op.drop_index("erc20_token_transfers_number_log_index", table_name="erc20_token_transfers", if_exists=True)
    op.drop_index(
        "erc20_token_transfers_to_address_number_log_index_index", table_name="erc20_token_transfers", if_exists=True
    )
    op.drop_index(
        "erc20_token_transfers_token_address_from_index_index", table_name="erc20_token_transfers", if_exists=True
    )
    op.drop_index(
        "erc20_token_transfers_token_address_number_log_index_index", table_name="erc20_token_transfers", if_exists=True
    )
    op.drop_index(
        "erc20_token_transfers_token_address_to_index_index", table_name="erc20_token_transfers", if_exists=True
    )
    op.create_index(
        "idx_erc20_transfers_block_hash", "erc20_token_transfers", ["block_hash"], unique=False, if_not_exists=True
    )
    op.create_index(
        "idx_erc20_transfers_token_from_time",
        "erc20_token_transfers",
        [
            "token_address",
            "from_address",
            sa.text("block_timestamp DESC"),
            sa.text("block_number DESC"),
            sa.text("log_index DESC"),
        ],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "idx_erc20_transfers_token_time",
        "erc20_token_transfers",
        ["token_address", sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "idx_erc20_transfers_token_to_time",
        "erc20_token_transfers",
        [
            "token_address",
            "to_address",
            sa.text("block_timestamp DESC"),
            sa.text("block_number DESC"),
            sa.text("log_index DESC"),
        ],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column("erc721_token_transfers", "block_number", existing_type=sa.BIGINT(), nullable=False)
    op.alter_column("erc721_token_transfers", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column(
        "erc721_token_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "erc721_token_transfers",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "erc721_token_transfers",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=False,
        existing_server_default=sa.text("false"),
    )
    op.drop_index("erc721_token_transfers_block_timestamp_index", table_name="erc721_token_transfers", if_exists=True)
    op.drop_index(
        "erc721_token_transfers_from_address_number_log_index_index",
        table_name="erc721_token_transfers",
        if_exists=True,
    )
    op.drop_index("erc721_token_transfers_number_log_index", table_name="erc721_token_transfers", if_exists=True)
    op.drop_index(
        "erc721_token_transfers_to_address_number_log_index_index", table_name="erc721_token_transfers", if_exists=True
    )
    op.drop_index(
        "erc721_token_transfers_token_address_from_index", table_name="erc721_token_transfers", if_exists=True
    )
    op.drop_index("erc721_token_transfers_token_address_id_index", table_name="erc721_token_transfers", if_exists=True)
    op.drop_index(
        "erc721_token_transfers_token_address_number_log_index_index",
        table_name="erc721_token_transfers",
        if_exists=True,
    )
    op.drop_index("erc721_token_transfers_token_address_to_index", table_name="erc721_token_transfers", if_exists=True)
    op.create_index(
        "idx_erc721_transfers_timestamp",
        "erc721_token_transfers",
        [sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "idx_erc721_transfers_token_id",
        "erc721_token_transfers",
        [
            "token_address",
            "token_id",
            sa.text("block_timestamp DESC"),
            sa.text("block_number DESC"),
            sa.text("log_index DESC"),
        ],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "idx_erc721_transfers_token_time",
        "erc721_token_transfers",
        ["token_address", sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "exception_records", "block_number", existing_type=sa.BIGINT(), type_=sa.String(), existing_nullable=True
    )
    op.alter_column(
        "exception_records",
        "exception_env",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.JSON(),
        existing_nullable=True,
    )
    op.alter_column("exception_records", "record_time", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column(
        "fix_record",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "fix_record",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("logs", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("logs", "address", existing_type=postgresql.BYTEA(), nullable=False)
    op.alter_column(
        "logs",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "logs",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "logs", "reorg", existing_type=sa.BOOLEAN(), nullable=False, existing_server_default=sa.text("false")
    )
    op.drop_index("logs_address_block_number_log_index_index", table_name="logs", if_exists=True)
    op.drop_index("logs_address_topic_0_number_log_index_index", table_name="logs", if_exists=True)
    op.drop_index("logs_block_number_log_index_index", table_name="logs", if_exists=True)
    op.drop_index("logs_block_timestamp_index", table_name="logs", if_exists=True)
    op.create_index(
        "idx_logs_address_timestamp_number_log_index",
        "logs",
        [
            "address",
            sa.text("block_timestamp DESC"),
            sa.text("block_number DESC"),
            sa.text("transaction_index DESC"),
            sa.text("log_index DESC"),
        ],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "idx_logs_address_topic0_timestamp_number_log_index",
        "logs",
        [
            "address",
            "topic0",
            sa.text("block_timestamp DESC"),
            sa.text("block_number DESC"),
            sa.text("transaction_index DESC"),
            sa.text("log_index DESC"),
        ],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "token_address_nft_inventories",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "token_address_nft_inventories",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(
        "token_address_nft_inventories_wallet_address_token_address__idx",
        table_name="token_address_nft_inventories",
        if_exists=True,
    )
    op.create_index(
        "idx_nft_inventories_wallet_token",
        "token_address_nft_inventories",
        ["wallet_address", "token_address", "token_id"],
        unique=False,
        if_not_exists=True,
    )
    op.add_column(
        "tokens",
        sa.Column(
            "search_vector",
            postgresql.TSVECTOR(),
            sa.Computed("to_tsvector('english', COALESCE(symbol,'') || ' ' || COALESCE(name,''))", persisted=True),
            nullable=True,
        ),
    )
    op.alter_column(
        "tokens", "urls", existing_type=postgresql.JSONB(astext_type=sa.Text()), type_=sa.JSON(), existing_nullable=True
    )
    op.alter_column(
        "tokens",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "tokens",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("tokens_name_index", table_name="tokens", if_exists=True)
    op.drop_index("tokens_symbol_index", table_name="tokens", if_exists=True)
    op.drop_index("tokens_type_holders_index", table_name="tokens", if_exists=True)
    op.drop_index("tokens_type_index", table_name="tokens", if_exists=True)
    op.drop_index("tokens_type_on_chain_market_cap_index", table_name="tokens", if_exists=True)
    op.create_index("idx_tokens_name", "tokens", ["name"], unique=False, if_not_exists=True)
    op.create_index(
        "idx_tokens_search_vector",
        "tokens",
        ["search_vector"],
        unique=False,
        postgresql_using="gin",
        if_not_exists=True,
    )
    op.create_index("idx_tokens_type", "tokens", ["token_type"], unique=False, if_not_exists=True)
    op.create_index(
        "idx_tokens_type_holders",
        "tokens",
        ["token_type", sa.text("holder_count DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "idx_tokens_type_market_cap",
        "tokens",
        ["token_type", sa.text("on_chain_market_cap DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column("traces", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column(
        "traces",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "traces",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "traces", "reorg", existing_type=sa.BOOLEAN(), nullable=False, existing_server_default=sa.text("false")
    )
    op.drop_index("traces_block_number_index", table_name="traces", if_exists=True)
    op.drop_index("traces_from_address_block_number_index", table_name="traces", if_exists=True)
    op.drop_index("traces_to_address_block_number_index", table_name="traces", if_exists=True)
    op.drop_index("traces_transaction_hash_index", table_name="traces", if_exists=True)
    op.create_index("idx_traces_block_hash", "traces", ["block_hash"], unique=False, if_not_exists=True)
    op.create_index("idx_traces_transaction_hash", "traces", ["transaction_hash"], unique=False, if_not_exists=True)
    op.alter_column("transactions", "from_address", existing_type=postgresql.BYTEA(), nullable=False)
    op.alter_column(
        "transactions",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "transactions",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "transactions", "reorg", existing_type=sa.BOOLEAN(), nullable=False, existing_server_default=sa.text("false")
    )
    op.drop_index("transactions_block_number_transaction_index", table_name="transactions", if_exists=True)
    op.drop_index("transactions_block_timestamp_index", table_name="transactions", if_exists=True)
    op.drop_index("transactions_from_address_block_number_transaction_idx", table_name="transactions", if_exists=True)
    op.drop_index("transactions_to_address_block_number_transaction_idx", table_name="transactions", if_exists=True)
    op.create_index(
        "idx_transactions_timestamp_number_index",
        "transactions",
        [sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("logs_pkey", "logs", type_="primary")
    op.create_primary_key(
        "logs_pkey",
        "logs",
        ["log_index", "transaction_hash"],
    )

    op.drop_index("idx_transactions_timestamp_number_index", table_name="transactions", if_exists=True)
    op.create_index(
        "transactions_to_address_block_number_transaction_idx",
        "transactions",
        ["to_address", sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "transactions_from_address_block_number_transaction_idx",
        "transactions",
        ["from_address", sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "transactions_block_timestamp_index", "transactions", ["block_timestamp"], unique=False, if_not_exists=True
    )
    op.create_index(
        "transactions_block_number_transaction_index",
        "transactions",
        [sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "transactions", "reorg", existing_type=sa.BOOLEAN(), nullable=True, existing_server_default=sa.text("false")
    )
    op.alter_column(
        "transactions",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "transactions",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("transactions", "from_address", existing_type=postgresql.BYTEA(), nullable=True)
    op.drop_index("idx_traces_transaction_hash", table_name="traces", if_exists=True)
    op.drop_index("idx_traces_block_hash", table_name="traces", if_exists=True)
    op.create_index("traces_transaction_hash_index", "traces", ["transaction_hash"], unique=False, if_not_exists=True)
    op.create_index(
        "traces_to_address_block_number_index",
        "traces",
        ["to_address", sa.text("block_number DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "traces_from_address_block_number_index",
        "traces",
        ["from_address", sa.text("block_number DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "traces_block_number_index", "traces", [sa.text("block_number DESC")], unique=False, if_not_exists=True
    )
    op.alter_column(
        "traces", "reorg", existing_type=sa.BOOLEAN(), nullable=True, existing_server_default=sa.text("false")
    )
    op.alter_column(
        "traces",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "traces",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("traces", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.drop_index("idx_tokens_type_market_cap", table_name="tokens", if_exists=True)
    op.drop_index("idx_tokens_type_holders", table_name="tokens", if_exists=True)
    op.drop_index("idx_tokens_type", table_name="tokens", if_exists=True)
    op.drop_index("idx_tokens_search_vector", table_name="tokens", postgresql_using="gin", if_exists=True)
    op.drop_index("idx_tokens_name", table_name="tokens", if_exists=True)
    op.create_index(
        "tokens_type_on_chain_market_cap_index",
        "tokens",
        ["token_type", sa.text("on_chain_market_cap DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index("tokens_type_index", "tokens", ["token_type"], unique=False, if_not_exists=True)
    op.create_index(
        "tokens_type_holders_index",
        "tokens",
        ["token_type", sa.text("holder_count DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index("tokens_symbol_index", "tokens", ["symbol"], unique=False, if_not_exists=True)
    op.create_index("tokens_name_index", "tokens", ["name"], unique=False, if_not_exists=True)
    op.alter_column(
        "tokens",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "tokens",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "tokens", "urls", existing_type=sa.JSON(), type_=postgresql.JSONB(astext_type=sa.Text()), existing_nullable=True
    )
    op.drop_column("tokens", "search_vector")
    op.drop_index("idx_nft_inventories_wallet_token", table_name="token_address_nft_inventories", if_exists=True)
    op.create_index(
        "token_address_nft_inventories_wallet_address_token_address__idx",
        "token_address_nft_inventories",
        ["wallet_address", "token_address", "token_id"],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "token_address_nft_inventories",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "token_address_nft_inventories",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("idx_logs_address_topic0_timestamp_number_log_index", table_name="logs", if_exists=True)
    op.drop_index("idx_logs_address_timestamp_number_log_index", table_name="logs", if_exists=True)
    op.create_index(
        "logs_block_timestamp_index", "logs", [sa.text("block_timestamp DESC")], unique=False, if_not_exists=True
    )
    op.create_index(
        "logs_block_number_log_index_index",
        "logs",
        [sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "logs_address_topic_0_number_log_index_index",
        "logs",
        ["address", "topic0", sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "logs_address_block_number_log_index_index",
        "logs",
        ["address", sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "logs", "reorg", existing_type=sa.BOOLEAN(), nullable=True, existing_server_default=sa.text("false")
    )
    op.alter_column(
        "logs",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "logs",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("logs", "address", existing_type=postgresql.BYTEA(), nullable=True)
    op.alter_column("logs", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column(
        "fix_record",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "fix_record",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("exception_records", "record_time", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column(
        "exception_records",
        "exception_env",
        existing_type=sa.JSON(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "exception_records", "block_number", existing_type=sa.String(), type_=sa.BIGINT(), existing_nullable=True
    )
    op.drop_index("idx_erc721_transfers_token_time", table_name="erc721_token_transfers", if_exists=True)
    op.drop_index("idx_erc721_transfers_token_id", table_name="erc721_token_transfers", if_exists=True)
    op.drop_index("idx_erc721_transfers_timestamp", table_name="erc721_token_transfers", if_exists=True)
    op.create_index(
        "erc721_token_transfers_token_address_to_index",
        "erc721_token_transfers",
        ["token_address", "to_address"],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc721_token_transfers_token_address_number_log_index_index",
        "erc721_token_transfers",
        ["token_address", sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc721_token_transfers_token_address_id_index",
        "erc721_token_transfers",
        ["token_address", "token_id"],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc721_token_transfers_token_address_from_index",
        "erc721_token_transfers",
        ["token_address", "from_address"],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc721_token_transfers_to_address_number_log_index_index",
        "erc721_token_transfers",
        ["to_address", sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc721_token_transfers_number_log_index",
        "erc721_token_transfers",
        [sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc721_token_transfers_from_address_number_log_index_index",
        "erc721_token_transfers",
        ["from_address", sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc721_token_transfers_block_timestamp_index",
        "erc721_token_transfers",
        [sa.text("block_timestamp DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "erc721_token_transfers",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=True,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "erc721_token_transfers",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "erc721_token_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("erc721_token_transfers", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("erc721_token_transfers", "block_number", existing_type=sa.BIGINT(), nullable=True)
    op.drop_index("idx_erc20_transfers_token_to_time", table_name="erc20_token_transfers", if_exists=True)
    op.drop_index("idx_erc20_transfers_token_time", table_name="erc20_token_transfers", if_exists=True)
    op.drop_index("idx_erc20_transfers_token_from_time", table_name="erc20_token_transfers", if_exists=True)
    op.drop_index("idx_erc20_transfers_block_hash", table_name="erc20_token_transfers", if_exists=True)
    op.create_index(
        "erc20_token_transfers_token_address_to_index_index",
        "erc20_token_transfers",
        ["token_address", "to_address"],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc20_token_transfers_token_address_number_log_index_index",
        "erc20_token_transfers",
        ["token_address", sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc20_token_transfers_token_address_from_index_index",
        "erc20_token_transfers",
        ["token_address", "from_address"],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc20_token_transfers_to_address_number_log_index_index",
        "erc20_token_transfers",
        ["to_address", sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc20_token_transfers_number_log_index",
        "erc20_token_transfers",
        [sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc20_token_transfers_from_address_number_log_index_index",
        "erc20_token_transfers",
        ["from_address", sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "erc20_token_transfers",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=True,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "erc20_token_transfers",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "erc20_token_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("erc20_token_transfers", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("erc20_token_transfers", "block_number", existing_type=sa.BIGINT(), nullable=True)
    op.drop_index("idx_erc1155_transfers_token_time", table_name="erc1155_token_transfers", if_exists=True)
    op.drop_index("idx_erc1155_transfers_token_id", table_name="erc1155_token_transfers", if_exists=True)
    op.drop_index("idx_erc1155_transfers_block_log", table_name="erc1155_token_transfers", if_exists=True)
    op.create_index(
        "erc1155_token_transfers_token_address_to_index",
        "erc1155_token_transfers",
        ["token_address", "to_address"],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc1155_token_transfers_token_address_number_log_index_index",
        "erc1155_token_transfers",
        ["token_address", sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc1155_token_transfers_token_address_id_index",
        "erc1155_token_transfers",
        ["token_address", "token_id"],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc1155_token_transfers_token_address_from_index",
        "erc1155_token_transfers",
        ["token_address", "from_address"],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc1155_token_transfers_to_address_number_log_index_index",
        "erc1155_token_transfers",
        ["to_address", sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc1155_token_transfers_number_log_index",
        "erc1155_token_transfers",
        [sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "erc1155_token_transfers_from_address_number_log_index_index",
        "erc1155_token_transfers",
        ["from_address", sa.text("block_number DESC"), sa.text("log_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "erc1155_token_transfers",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=True,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "erc1155_token_transfers",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "erc1155_token_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("erc1155_token_transfers", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("erc1155_token_transfers", "block_number", existing_type=sa.BIGINT(), nullable=True)
    op.alter_column(
        "contracts", "reorg", existing_type=sa.BOOLEAN(), nullable=True, existing_server_default=sa.text("false")
    )
    op.alter_column(
        "contracts",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "contracts",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "contracts",
        "social_list",
        existing_type=sa.JSON(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.drop_index("idx_internal_txs_transaction_hash", table_name="contract_internal_transactions", if_exists=True)
    op.drop_index("idx_internal_txs_to_addr_block_tx", table_name="contract_internal_transactions", if_exists=True)
    op.drop_index("idx_internal_txs_from_addr_block_tx", table_name="contract_internal_transactions", if_exists=True)
    op.drop_index("idx_internal_txs_block_number", table_name="contract_internal_transactions", if_exists=True)
    op.create_index(
        "internal_transactions_to_address_number_transaction_index",
        "contract_internal_transactions",
        ["to_address", sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "internal_transactions_number_transaction_index",
        "contract_internal_transactions",
        [sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "internal_transactions_from_address_number_transaction_index",
        "contract_internal_transactions",
        ["from_address", sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "internal_transactions_block_number_index",
        "contract_internal_transactions",
        [sa.text("block_number DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "contract_internal_transactions_transaction_hash_idx",
        "contract_internal_transactions",
        ["transaction_hash"],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "contract_internal_transactions",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=True,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "contract_internal_transactions",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "contract_internal_transactions",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "contract_internal_transactions", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.drop_index("idx_blocks_timestamp", table_name="blocks", if_exists=True)
    op.drop_index(
        "idx_blocks_number_no_reorg", table_name="blocks", postgresql_where=sa.text("reorg = false"), if_exists=True
    )
    op.drop_index("idx_blocks_number", table_name="blocks", if_exists=True)
    op.drop_index(
        "idx_blocks_hash_no_reorg", table_name="blocks", postgresql_where=sa.text("reorg = false"), if_exists=True
    )
    op.create_index("blocks_timestamp_index", "blocks", [sa.text("timestamp DESC")], unique=False, if_not_exists=True)
    op.create_index(
        "blocks_number_unique_when_not_reorg",
        "blocks",
        ["number"],
        unique=True,
        postgresql_where="(reorg = false)",
        if_not_exists=True,
    )
    op.create_index("blocks_number_index", "blocks", [sa.text("number DESC")], unique=False, if_not_exists=True)
    op.create_index(
        "blocks_hash_unique_when_not_reorg",
        "blocks",
        ["hash"],
        unique=True,
        postgresql_where="(reorg = false)",
        if_not_exists=True,
    )
    op.alter_column(
        "blocks", "reorg", existing_type=sa.BOOLEAN(), nullable=True, existing_server_default=sa.text("false")
    )
    op.alter_column(
        "blocks",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "blocks",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("idx_block_ts_mapper_number", table_name="block_ts_mapper", if_exists=True)
    op.create_index(
        "block_ts_mapper_idx", "block_ts_mapper", [sa.text("block_number DESC")], unique=False, if_not_exists=True
    )
    op.drop_index("idx_feature_value_block", table_name="all_feature_value_records", if_exists=True)
    op.create_index(
        "all_feature_value_records_feature_block_index",
        "all_feature_value_records",
        ["feature_id", sa.text("block_number DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "all_feature_value_records",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "all_feature_value_records",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "all_feature_value_records",
        "value",
        existing_type=sa.JSON(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "af_index_token_address_daily_stats", "update_time", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.drop_column("af_index_token_address_daily_stats", "block_date")
    op.alter_column(
        "af_index_daily_stats",
        "internal_transaction_self_value",
        existing_type=sa.Numeric(),
        type_=sa.BIGINT(),
        existing_nullable=True,
    )
    op.alter_column(
        "af_index_daily_stats",
        "internal_transaction_out_value",
        existing_type=sa.Numeric(),
        type_=sa.BIGINT(),
        existing_nullable=True,
    )
    op.alter_column(
        "af_index_daily_stats",
        "internal_transaction_in_value",
        existing_type=sa.Numeric(),
        type_=sa.BIGINT(),
        existing_nullable=True,
    )
    op.alter_column(
        "af_index_daily_stats",
        "transaction_self_value",
        existing_type=sa.Numeric(),
        type_=sa.BIGINT(),
        existing_nullable=True,
    )
    op.alter_column(
        "af_index_daily_stats",
        "transaction_out_value",
        existing_type=sa.Numeric(),
        type_=sa.BIGINT(),
        existing_nullable=True,
    )
    op.alter_column(
        "af_index_daily_stats",
        "transaction_in_value",
        existing_type=sa.Numeric(),
        type_=sa.BIGINT(),
        existing_nullable=True,
    )
    op.drop_index("idx_addr_txs_type_time", table_name="address_transactions", if_exists=True)
    op.drop_index("idx_addr_txs_time", table_name="address_transactions", if_exists=True)
    op.create_index(
        "address_transactions_address_txn_type_block_timestamp_block_idx",
        "address_transactions",
        [
            "address",
            "txn_type",
            sa.text("block_timestamp DESC"),
            sa.text("block_number DESC"),
            sa.text("transaction_index DESC"),
        ],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "address_transactions_address_block_timestamp_block_number_t_idx",
        "address_transactions",
        ["address", sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_transactions",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_transactions",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_token_transfers",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_token_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("idx_token_holders_balance", table_name="address_token_holders", if_exists=True)
    op.create_index(
        "address_token_holders_token_address_balance_of_idx",
        "address_token_holders",
        ["token_address", sa.text("balance_of DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_token_holders",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_token_holders",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("idx_token_balances_addr_token_block", table_name="address_token_balances", if_exists=True)
    op.create_index(
        "token_balance_address_id_number_index",
        "address_token_balances",
        ["address", "token_address", sa.text("token_id DESC"), sa.text("block_number DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_token_balances",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=True,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "address_token_balances",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_token_balances",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("address_token_balances", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column(
        "address_nft_transfers",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_nft_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("idx_nft_1155_holders_token_balance", table_name="address_nft_1155_holders", if_exists=True)
    op.create_index(
        "address_nft_1155_holders_token_address_balance_of_idx",
        "address_nft_1155_holders",
        ["token_address", "token_id", sa.text("balance_of DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_nft_1155_holders",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_nft_1155_holders",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("idx_internal_txs_address_time", table_name="address_internal_transactions", if_exists=True)
    op.create_index(
        "address_internal_transactions_address_nt_t_idx",
        "address_internal_transactions",
        ["address", sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_internal_transactions",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_internal_transactions",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("idx_token_balances_token_balance", table_name="address_current_token_balances", if_exists=True)
    op.create_index(
        "current_token_balances_token_address_id_balance_of_index",
        "address_current_token_balances",
        ["token_address", "token_id", sa.text("balance DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "current_token_balances_token_address_balance_of_index",
        "address_current_token_balances",
        ["token_address", sa.text("balance DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_current_token_balances",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=True,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "address_current_token_balances",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_current_token_balances",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("idx_contract_ops_address_time", table_name="address_contract_operations", if_exists=True)
    op.create_index(
        "address_contract_operations_address_block_tn_t_idx",
        "address_contract_operations",
        ["address", sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_contract_operations",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_contract_operations",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("idx_coin_balances_address_block", table_name="address_coin_balances", if_exists=True)
    op.create_index(
        "coin_balance_address_number_desc_index",
        "address_coin_balances",
        [sa.text("address DESC"), sa.text("block_number DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.alter_column(
        "address_coin_balances",
        "reorg",
        existing_type=sa.BOOLEAN(),
        nullable=True,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "address_coin_balances",
        "update_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "address_coin_balances",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("address_coin_balances", "block_timestamp", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.create_table(
        "erc721_token_id_changes",
        sa.Column("token_address", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("token_id", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=False),
        sa.Column("token_owner", postgresql.BYTEA(), autoincrement=False, nullable=True),
        sa.Column("block_number", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column(
            "create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), autoincrement=False, nullable=True
        ),
        sa.Column(
            "update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), autoincrement=False, nullable=True
        ),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("token_address", "token_id", "block_number", name="erc721_token_id_changes_pkey"),
        if_not_exists=True,
    )
    op.create_index(
        "erc721_change_address_id_number_desc_index",
        "erc721_token_id_changes",
        ["token_address", "token_id", sa.text("block_number DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_table(
        "erc721_token_mint",
        sa.Column("token_address", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("token_id", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column("block_number", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("transaction_hash", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column(
            "create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), autoincrement=False, nullable=True
        ),
        sa.Column(
            "update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), autoincrement=False, nullable=True
        ),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("token_address", "token_id", name="erc721_token_mint_pkey"),
        if_not_exists=True,
    )
    op.create_table(
        "period_wallet_addresses_aggregates",
        sa.Column("address", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("period_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("txn_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("txn_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("txn_in_value", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("txn_out_value", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("internal_txn_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("internal_txn_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("internal_txn_in_value", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("internal_txn_out_value", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("erc20_transfer_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc721_transfer_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc1155_transfer_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc20_transfer_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc721_transfer_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc1155_transfer_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "internal_txn_cnt",
            sa.INTEGER(),
            sa.Computed("(internal_txn_in_cnt + internal_txn_out_cnt)", persisted=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "erc20_transfer_cnt",
            sa.INTEGER(),
            sa.Computed("(erc20_transfer_in_cnt + erc20_transfer_out_cnt)", persisted=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "erc721_transfer_cnt",
            sa.INTEGER(),
            sa.Computed("(erc721_transfer_in_cnt + erc721_transfer_out_cnt)", persisted=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "erc1155_transfer_cnt",
            sa.INTEGER(),
            sa.Computed("(erc1155_transfer_in_cnt + erc1155_transfer_out_cnt)", persisted=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("txn_self_cnt", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("txn_in_error_cnt", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("txn_out_error_cnt", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("txn_self_error_cnt", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "txn_cnt",
            sa.INTEGER(),
            sa.Computed("((txn_in_cnt + txn_out_cnt) - txn_self_cnt)", persisted=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("deposit_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("withdraw_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("gas_in_used", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("l2_txn_in_fee", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("l1_txn_in_fee", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("txn_in_fee", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("gas_out_used", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("l2_txn_out_fee", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("l1_txn_out_fee", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("txn_out_fee", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("contract_deployed_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("from_address_unique_interacted_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("to_address_unique_interacted_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("address", "period_date", name="period_wallet_addresses_aggregates_pkey"),
        if_not_exists=True,
    )
    op.create_table(
        "af_index_token_address_stats",
        sa.Column("address", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("token_holder_count", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("token_transfer_count", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("address", name="af_index_token_address_stats_pkey"),
        if_not_exists=True,
    )
    op.drop_index("idx_nft_owner_token_block", table_name="nft_owner_changes", if_exists=True)
    op.drop_table("nft_owner_changes", if_exists=True)
    op.drop_index("idx_nft_details_owner", table_name="nft_details", if_exists=True)
    op.drop_table("nft_details", if_exists=True)
    op.drop_table("cyber_id_record", if_exists=True)
    op.drop_table("cyber_address", if_exists=True)
    op.drop_table("af_projects", if_exists=True)
    op.drop_table("af_project_contracts", if_exists=True)
    op.drop_table("af_karak_vault_token", if_exists=True)
    op.drop_table("af_karak_records", if_exists=True)
    op.drop_table("af_karak_address_current", if_exists=True)
    op.drop_table("af_eigen_layer_records", if_exists=True)
    op.drop_table("af_eigen_layer_address_current", if_exists=True)
    # ### end Alembic commands ###
