"""add api server table

Revision ID: b15f744e8582
Revises: 8a915490914a
Create Date: 2024-07-16 14:16:26.060954

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "b15f744e8582"
down_revision: Union[str, None] = "8a915490914a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "daily_addresses_aggregates",
        sa.Column("block_date", sa.DATE(), nullable=False),
        sa.Column("active_address_cnt", sa.BIGINT(), nullable=True),
        sa.Column("receiver_address_cnt", sa.BIGINT(), nullable=True),
        sa.Column("sender_address_cnt", sa.BIGINT(), nullable=True),
        sa.Column("total_address_cnt", sa.BIGINT(), nullable=True),
        sa.Column("new_address_cnt", sa.BIGINT(), nullable=True),
        sa.PrimaryKeyConstraint("block_date"),
    )
    op.create_table(
        "daily_blocks_aggregates",
        sa.Column("block_date", sa.DATE(), nullable=False),
        sa.Column("cnt", sa.BIGINT(), nullable=True),
        sa.Column("avg_size", sa.NUMERIC(), nullable=True),
        sa.Column("avg_gas_limit", sa.NUMERIC(), nullable=True),
        sa.Column("avg_gas_used", sa.NUMERIC(), nullable=True),
        sa.Column("total_gas_used", sa.BIGINT(), nullable=True),
        sa.Column("avg_gas_used_percentage", sa.NUMERIC(), nullable=True),
        sa.Column("avg_txn_cnt", sa.NUMERIC(), nullable=True),
        sa.Column("total_cnt", sa.BIGINT(), nullable=True),
        sa.Column("block_interval", sa.NUMERIC(), nullable=True),
        sa.PrimaryKeyConstraint("block_date"),
    )
    op.create_table(
        "daily_tokens_aggregates",
        sa.Column("block_date", sa.DATE(), nullable=False),
        sa.Column("erc20_active_address_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc20_total_transfer_cnt", sa.BIGINT(), nullable=True),
        sa.Column("erc721_active_address_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc721_total_transfer_cnt", sa.BIGINT(), nullable=True),
        sa.Column("erc1155_active_address_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc1155_total_transfer_cnt", sa.BIGINT(), nullable=True),
        sa.PrimaryKeyConstraint("block_date"),
    )
    op.create_table(
        "daily_transactions_aggregates",
        sa.Column("block_date", sa.DATE(), nullable=False),
        sa.Column("cnt", sa.BIGINT(), nullable=True),
        sa.Column("total_cnt", sa.BIGINT(), nullable=True),
        sa.Column("txn_error_cnt", sa.BIGINT(), nullable=True),
        sa.Column("avg_transaction_fee", sa.NUMERIC(), nullable=True),
        sa.Column("avg_gas_price", sa.NUMERIC(), nullable=True),
        sa.Column("max_gas_price", sa.NUMERIC(), nullable=True),
        sa.Column("min_gas_price", sa.NUMERIC(), nullable=True),
        sa.Column("avg_receipt_l1_fee", sa.NUMERIC(), nullable=True),
        sa.Column("max_receipt_l1_fee", sa.NUMERIC(), nullable=True),
        sa.Column("min_receipt_l1_fee", sa.NUMERIC(), nullable=True),
        sa.Column("avg_receipt_l1_gas_used", sa.NUMERIC(), nullable=True),
        sa.Column("max_receipt_l1_gas_used", sa.NUMERIC(), nullable=True),
        sa.Column("min_receipt_l1_gas_used", sa.NUMERIC(), nullable=True),
        sa.Column("avg_receipt_l1_gas_price", sa.NUMERIC(), nullable=True),
        sa.Column("max_receipt_l1_gas_price", sa.NUMERIC(), nullable=True),
        sa.Column("min_receipt_l1_gas_price", sa.NUMERIC(), nullable=True),
        sa.Column("avg_receipt_l1_fee_scalar", sa.NUMERIC(), nullable=True),
        sa.Column("max_receipt_l1_fee_scalar", sa.NUMERIC(), nullable=True),
        sa.Column("min_receipt_l1_fee_scalar", sa.NUMERIC(), nullable=True),
        sa.PrimaryKeyConstraint("block_date"),
    )
    op.create_table(
        "scheduled_token_count_metadata",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("dag_id", sa.VARCHAR(), nullable=True),
        sa.Column("execution_date", sa.DateTime(), nullable=True),
        sa.Column("last_data_timestamp", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "scheduled_wallet_count_metadata",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("dag_id", sa.VARCHAR(), nullable=True),
        sa.Column("execution_date", sa.DateTime(), nullable=True),
        sa.Column("last_data_timestamp", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "statistics_wallet_addresses",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("txn_in_cnt", sa.INTEGER(), nullable=True),
        sa.Column("txn_out_cnt", sa.INTEGER(), nullable=True),
        sa.Column("txn_in_value", sa.NUMERIC(precision=78), nullable=True),
        sa.Column("txn_out_value", sa.NUMERIC(precision=78), nullable=True),
        sa.Column("internal_txn_in_cnt", sa.INTEGER(), nullable=True),
        sa.Column("internal_txn_out_cnt", sa.INTEGER(), nullable=True),
        sa.Column("internal_txn_in_value", sa.NUMERIC(precision=78), nullable=True),
        sa.Column("internal_txn_out_value", sa.NUMERIC(precision=78), nullable=True),
        sa.Column("erc20_transfer_in_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc721_transfer_in_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc1155_transfer_in_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc20_transfer_out_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc721_transfer_out_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc1155_transfer_out_cnt", sa.INTEGER(), nullable=True),
        sa.Column("txn_cnt", sa.INTEGER(), nullable=True),
        sa.Column("internal_txn_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc20_transfer_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc721_transfer_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc1155_transfer_cnt", sa.INTEGER(), nullable=True),
        sa.Column("deposit_cnt", sa.INTEGER(), nullable=True),
        sa.Column("withdraw_cnt", sa.INTEGER(), nullable=True),
        sa.Column("tag", sa.VARCHAR(), nullable=True),
        sa.PrimaryKeyConstraint("address"),
    )
    op.create_table(
        "wallet_addresses",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("ens_name", sa.VARCHAR(), nullable=True),
        sa.PrimaryKeyConstraint("address"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("scheduled_wallet_count_metadata")
    op.drop_table("scheduled_token_count_metadata")
    op.drop_table("daily_transactions_aggregates")
    op.drop_table("daily_tokens_aggregates")
    op.drop_table("daily_blocks_aggregates")
    op.drop_table("daily_addresses_aggregates")
    op.drop_table("wallet_addresses")
    op.drop_table("statistics_wallet_addresses")
    # ### end Alembic commands ###
