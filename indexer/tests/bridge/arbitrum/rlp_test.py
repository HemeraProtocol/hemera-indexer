#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time  2024/7/10 15:05
# @Author  will
# @File  rlp_test.py
# @Brief
import pytest
from web3 import Web3

from indexer.modules.bridge.arbitrum.arb_rlp import calculate_deposit_tx_id, calculate_submit_retryable_id


@pytest.mark.indexer
@pytest.mark.indexer_bridge
def test_arbitrum_rlp(caplog):
    l2_chain_id = 42161
    from_address = "0xeA3123E9d9911199a6711321d1277285e6d4F3EC"
    message_number = 20556
    l1_base_fee = 25249467480
    dest_address = "0x6c411aD3E74De3E7Bd422b94A27770f5B86C623B"
    l2_call_value = 600000000000000000
    l1_value = 600360471887006336
    max_submission_fee = 324422087006336
    excess_fee_refund_address = "0xa2e06c19EE14255889f0Ec0cA37f6D0778D06754"
    call_value_refund_address = "0xa2e06c19EE14255889f0Ec0cA37f6D0778D06754"
    gas_limit = 120166
    max_fee_per_gas = 300000000
    data = "0x2e567b36000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a2e06c19ee14255889f0ec0ca37f6d0778d06754000000000000000000000000a2e06c19ee14255889f0ec0ca37f6d0778d067540000000000000000000000000000000000000000000000000853a0d2313c000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

    mid = "0x69f901e882a4b1a0000000000000000000000000000000000000000000000000000000000000504c94ea3123e9d9911199a6711321d1277285e6d4f3ec8505e0fc4c58880854e8ab1802ca808411e1a3008301d566946c411ad3e74de3e7bd422b94a27770f5b86c623b880853a0d2313c000094a2e06c19ee14255889f0ec0ca37f6d0778d067548701270f6740d88094a2e06c19ee14255889f0ec0ca37f6d0778d06754b901442e567b36000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a2e06c19ee14255889f0ec0ca37f6d0778d06754000000000000000000000000a2e06c19ee14255889f0ec0ca37f6d0778d067540000000000000000000000000000000000000000000000000853a0d2313c000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

    res = calculate_submit_retryable_id(
        l2_chain_id,
        message_number,
        from_address,
        l1_base_fee,
        dest_address,
        l2_call_value,
        l1_value,
        max_submission_fee,
        excess_fee_refund_address,
        call_value_refund_address,
        gas_limit,
        max_fee_per_gas,
        data,
    )
    assert Web3.keccak(hexstr=mid).hex() == "0x8ba13904639c7444d8578cc582a230b8501c9f0f7903f5069d276fdd3a7dea44"

    assert res == "0x8ba13904639c7444d8578cc582a230b8501c9f0f7903f5069d276fdd3a7dea44"
    print("ok!")


@pytest.mark.indexer
@pytest.mark.indexer_bridge
def test_calculate_deposit_tx_id():
    l2_chain_id = 42161
    message_number = 1605605
    from_address = "0xF45e40e5200615Ba57F66025475571063CD70222"
    to_address = "0xE34d40E5200615ba57F66025475571063Cd6f111"
    value = 1000000000000000
    ctx = calculate_deposit_tx_id(l2_chain_id, message_number, from_address, to_address, value)
    print(ctx)
    expect = "0x358bad7e9e28729b77f41ca3fdd188bcccc5004636d0cf81d7dc2abaed9c84fd"
    assert ctx == expect
