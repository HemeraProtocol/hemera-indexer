"""initial base

Revision ID: 6a9dce905151
Revises: 
Create Date: 2024-05-11 18:15:21.989624

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6a9dce905151'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('blocks',
    sa.Column('hash', postgresql.BYTEA(), nullable=False),
    sa.Column('number', sa.BIGINT(), nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('parent_hash', postgresql.BYTEA(), nullable=True),
    sa.Column('nonce', postgresql.BYTEA(), nullable=True),
    sa.Column('gas_limit', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('gas_used', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('base_fee_per_gas', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('difficulty', sa.NUMERIC(precision=38), nullable=True),
    sa.Column('total_difficulty', sa.NUMERIC(precision=38), nullable=True),
    sa.Column('size', sa.BIGINT(), nullable=True),
    sa.Column('miner', postgresql.BYTEA(), nullable=True),
    sa.Column('sha3_uncles', postgresql.BYTEA(), nullable=True),
    sa.Column('transactions_root', postgresql.BYTEA(), nullable=True),
    sa.Column('transactions_count', sa.BIGINT(), nullable=True),
    sa.Column('state_root', postgresql.BYTEA(), nullable=True),
    sa.Column('receipts_root', postgresql.BYTEA(), nullable=True),
    sa.Column('extra_data', postgresql.BYTEA(), nullable=True),
    sa.Column('withdrawals_root', postgresql.BYTEA(), nullable=True),
    sa.Column('create_time', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('update_time', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('data_confirmed', sa.BOOLEAN(), nullable=True),
    sa.PrimaryKeyConstraint('hash')
    )
    op.create_table('logs',
    sa.Column('log_index', sa.INTEGER(), nullable=False),
    sa.Column('address', postgresql.BYTEA(), nullable=True),
    sa.Column('data', postgresql.BYTEA(), nullable=True),
    sa.Column('topic0', postgresql.BYTEA(), nullable=True),
    sa.Column('topic1', postgresql.BYTEA(), nullable=True),
    sa.Column('topic2', postgresql.BYTEA(), nullable=True),
    sa.Column('topic3', postgresql.BYTEA(), nullable=True),
    sa.Column('transaction_hash', postgresql.BYTEA(), nullable=False),
    sa.Column('transaction_index', sa.INTEGER(), nullable=True),
    sa.Column('block_number', sa.BIGINT(), nullable=True),
    sa.Column('block_hash', postgresql.BYTEA(), nullable=False),
    sa.Column('block_timestamp', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('create_time', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('update_time', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('log_index', 'transaction_hash', 'block_hash')
    )
    op.create_table('transactions',
    sa.Column('hash', postgresql.BYTEA(), nullable=False),
    sa.Column('transaction_index', sa.INTEGER(), nullable=True),
    sa.Column('from_address', postgresql.BYTEA(), nullable=True),
    sa.Column('to_address', postgresql.BYTEA(), nullable=True),
    sa.Column('value', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('transaction_type', sa.INTEGER(), nullable=True),
    sa.Column('input', postgresql.BYTEA(), nullable=True),
    sa.Column('nonce', sa.INTEGER(), nullable=True),
    sa.Column('block_hash', postgresql.BYTEA(), nullable=True),
    sa.Column('block_number', sa.BIGINT(), nullable=True),
    sa.Column('block_timestamp', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('gas', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('gas_price', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('max_fee_per_gas', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('max_priority_fee_per_gas', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('receipt_root', postgresql.BYTEA(), nullable=True),
    sa.Column('receipt_status', sa.INTEGER(), nullable=True),
    sa.Column('receipt_gas_used', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('receipt_cumulative_gas_used', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('receipt_effective_gas_price', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('receipt_l1_fee', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('receipt_l1_fee_scalar', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('receipt_l1_gas_used', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('receipt_l1_gas_price', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('receipt_blob_gas_used', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('receipt_blob_gas_price', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('blob_versioned_hashes', postgresql.ARRAY(postgresql.BYTEA()), nullable=True),
    sa.Column('receipt_contract_address', postgresql.BYTEA(), nullable=True),
    sa.Column('exist_error', sa.BOOLEAN(), nullable=True),
    sa.Column('error', sa.TEXT(), nullable=True),
    sa.Column('revert_reason', sa.TEXT(), nullable=True),
    sa.Column('create_time', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('update_time', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('hash')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transactions')
    op.drop_table('logs')
    op.drop_table('blocks')
    # ### end Alembic commands ###
