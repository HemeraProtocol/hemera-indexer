"""add opensea

Revision ID: 3dd9b90d2e31
Revises: e8f78802f27a
Create Date: 2024-09-11 11:30:31.566920

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "3dd9b90d2e31"
down_revision: Union[str, None] = "e8f78802f27a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "af_opensea__transactions",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("is_offer", sa.BOOLEAN(), nullable=False),
        sa.Column("related_address", postgresql.BYTEA(), nullable=True),
        sa.Column("transaction_type", sa.SMALLINT(), nullable=True),
        sa.Column("order_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("zone", postgresql.BYTEA(), nullable=True),
        sa.Column("offer", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("consideration", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("fee", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("log_index", sa.BIGINT(), nullable=False),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("block_hash", postgresql.BYTEA(), nullable=False),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.Column("protocol_version", sa.VARCHAR(), server_default="1.6", nullable=True),
        sa.PrimaryKeyConstraint("address", "is_offer", "block_number", "log_index", "block_hash"),
        if_not_exists=True,
    )
    op.create_index(
        "af_opensea__transactions_address_block_number_log_index_blo_idx",
        "af_opensea__transactions",
        ["address", sa.text("block_number DESC"), sa.text("log_index DESC"), sa.text("block_timestamp DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "af_opensea__transactions_address_block_timestamp_idx",
        "af_opensea__transactions",
        ["address", sa.text("block_timestamp DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "af_opensea__transactions_block_timestamp_idx",
        "af_opensea__transactions",
        [sa.text("block_timestamp DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_table(
        "af_opensea_daily_transactions",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("block_date", sa.DATE(), nullable=False),
        sa.Column("buy_txn_count", sa.INTEGER(), nullable=True),
        sa.Column("sell_txn_count", sa.INTEGER(), nullable=True),
        sa.Column("swap_txn_count", sa.INTEGER(), nullable=True),
        sa.Column("buy_opensea_order_count", sa.INTEGER(), nullable=True),
        sa.Column("sell_opensea_order_count", sa.INTEGER(), nullable=True),
        sa.Column("swap_opensea_order_count", sa.INTEGER(), nullable=True),
        sa.Column("buy_nft_stats", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("sell_nft_stats", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("buy_volume_crypto", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("sell_volume_crypto", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("buy_volume_usd", sa.NUMERIC(), nullable=True),
        sa.Column("sell_volume_usd", sa.NUMERIC(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address", "block_date"),
        if_not_exists=True,
    )
    op.create_table(
        "af_opensea_na_crypto_token_mapping",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("address_var", sa.VARCHAR(length=42), nullable=True),
        sa.Column("price_symbol", sa.VARCHAR(), nullable=True),
        sa.Column("decimals", sa.INTEGER(), server_default=sa.text("18"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        if_not_exists=True,
    )
    op.create_table(
        "af_opensea_na_orders",
        sa.Column("order_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("zone", postgresql.BYTEA(), nullable=True),
        sa.Column("offerer", postgresql.BYTEA(), nullable=True),
        sa.Column("recipient", postgresql.BYTEA(), nullable=True),
        sa.Column("offer", postgresql.JSON(astext_type=sa.Text()), nullable=True),
        sa.Column("consideration", postgresql.JSON(astext_type=sa.Text()), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("log_index", sa.INTEGER(), nullable=False),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("block_hash", postgresql.BYTEA(), nullable=False),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.Column("protocol_version", sa.VARCHAR(), server_default="1.6", nullable=True),
        sa.PrimaryKeyConstraint("block_number", "log_index", "block_hash"),
        if_not_exists=True,
    )
    op.create_index(
        "idx_order_hash",
        "af_opensea_na_orders",
        ["order_hash"],
        unique=False,
        if_not_exists=True,
    )
    op.create_table(
        "af_opensea_na_scheduled_metadata",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("dag_id", sa.VARCHAR(), nullable=True),
        sa.Column("execution_date", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("last_data_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        if_not_exists=True,
    )
    op.create_table(
        "af_opensea_profile",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("buy_txn_count", sa.INTEGER(), server_default=sa.text("0"), nullable=True),
        sa.Column("sell_txn_count", sa.INTEGER(), server_default=sa.text("0"), nullable=True),
        sa.Column("swap_txn_count", sa.INTEGER(), server_default=sa.text("0"), nullable=True),
        sa.Column("buy_opensea_order_count", sa.INTEGER(), server_default=sa.text("0"), nullable=True),
        sa.Column("sell_opensea_order_count", sa.INTEGER(), server_default=sa.text("0"), nullable=True),
        sa.Column("swap_opensea_order_count", sa.INTEGER(), server_default=sa.text("0"), nullable=True),
        sa.Column("buy_nft_stats", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("sell_nft_stats", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("buy_volume_usd", sa.NUMERIC(), nullable=True),
        sa.Column("sell_volume_usd", sa.NUMERIC(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("first_transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("first_block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column(
            "txn_count",
            sa.INTEGER(),
            sa.Computed(
                "(buy_txn_count + sell_txn_count) + swap_txn_count",
            ),
            nullable=True,
        ),
        sa.Column(
            "opensea_order_count",
            sa.INTEGER(),
            sa.Computed(
                "(buy_opensea_order_count + sell_opensea_order_count) + swap_opensea_order_count",
            ),
            nullable=True,
        ),
        sa.Column("volume_usd", sa.NUMERIC(), server_default=sa.text("0"), nullable=True),
        sa.PrimaryKeyConstraint("address"),
        if_not_exists=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("af_opensea_profile")
    op.drop_table("af_opensea_na_scheduled_metadata")
    op.drop_index("idx_order_hash", table_name="af_opensea_na_orders")
    op.drop_table("af_opensea_na_orders")
    op.drop_table("af_opensea_na_crypto_token_mapping")
    op.drop_table("af_opensea_daily_transactions")
    op.drop_index("af_opensea__transactions_block_timestamp_idx", table_name="af_opensea__transactions")
    op.drop_index("af_opensea__transactions_address_block_timestamp_idx", table_name="af_opensea__transactions")
    op.drop_index(
        "af_opensea__transactions_address_block_number_log_index_blo_idx", table_name="af_opensea__transactions"
    )
    op.drop_table("af_opensea__transactions")
    # ### end Alembic commands ###
