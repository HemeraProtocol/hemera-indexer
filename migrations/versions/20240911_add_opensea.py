"""add opensea

Revision ID: 3dd9b90d2e31
Revises: e8f78802f27a
Create Date: 2024-09-11 11:30:31.566920

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "3dd9b90d2e31"
down_revision: Union[str, None] = "e8f78802f27a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "af_opensea__transactions",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("is_offer", sa.BOOLEAN(), nullable=False),
        sa.Column("related_address", postgresql.BYTEA(), nullable=True),
        sa.Column("transaction_type", sa.SMALLINT(), nullable=True),
        sa.Column("order_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("zone", postgresql.BYTEA(), nullable=True),
        sa.Column("offer", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("consideration", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("fee", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("log_index", sa.BIGINT(), nullable=False),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("block_hash", postgresql.BYTEA(), nullable=False),
        sa.Column("reorg", sa.BOOLEAN(), nullable=True),
        sa.Column("protocol_version", sa.VARCHAR(), server_default="1.6", nullable=True),
        sa.PrimaryKeyConstraint("address", "is_offer", "block_number", "log_index", "block_hash"),
    )
    op.create_table(
        "af_opensea_daily_transactions",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("block_date", sa.Date(), nullable=False),
        sa.Column("buy_txn_count", sa.INTEGER(), nullable=True),
        sa.Column("sell_txn_count", sa.INTEGER(), nullable=True),
        sa.Column("swap_txn_count", sa.INTEGER(), nullable=True),
        sa.Column("buy_opensea_order_count", sa.INTEGER(), nullable=True),
        sa.Column("sell_opensea_order_count", sa.INTEGER(), nullable=True),
        sa.Column("swap_opensea_order_count", sa.INTEGER(), nullable=True),
        sa.Column("buy_nft_stats", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("sell_nft_stats", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("buy_volume_crypto", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("sell_volume_crypto", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("buy_volume_usd", sa.NUMERIC(), nullable=True),
        sa.Column("sell_volume_usd", sa.NUMERIC(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address", "block_date"),
    )
    op.create_table(
        "af_opensea_na_crypto_token_mapping",
        sa.Column("address_var", sa.VARCHAR(), nullable=False),
        sa.Column("price_symbol", sa.VARCHAR(), nullable=True),
        sa.Column("decimals", sa.INTEGER(), nullable=True),
        sa.PrimaryKeyConstraint("address_var"),
    )
    op.create_table(
        "af_opensea_na_orders",
        sa.Column("order_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("zone", postgresql.BYTEA(), nullable=True),
        sa.Column("offerer", postgresql.BYTEA(), nullable=True),
        sa.Column("recipient", postgresql.BYTEA(), nullable=True),
        sa.Column("offer", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("consideration", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("log_index", sa.BIGINT(), nullable=False),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("block_hash", postgresql.BYTEA(), nullable=False),
        sa.Column("reorg", sa.BOOLEAN(), nullable=True),
        sa.Column("protocol_version", sa.VARCHAR(), server_default="1.6", nullable=True),
        sa.PrimaryKeyConstraint("block_number", "log_index", "block_hash"),
    )
    op.create_table(
        "af_opensea_na_scheduled_metadata",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("dag_id", sa.String(), nullable=True),
        sa.Column("execution_date", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("last_data_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "af_opensea_profile",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("buy_txn_count", sa.BIGINT(), nullable=True),
        sa.Column("sell_txn_count", sa.BIGINT(), nullable=True),
        sa.Column("swap_txn_count", sa.BIGINT(), nullable=True),
        sa.Column("buy_opensea_order_count", sa.BIGINT(), nullable=True),
        sa.Column("sell_opensea_order_count", sa.BIGINT(), nullable=True),
        sa.Column("swap_opensea_order_count", sa.BIGINT(), nullable=True),
        sa.Column("buy_nft_stats", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("sell_nft_stats", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("buy_volume_usd", sa.NUMERIC(), nullable=True),
        sa.Column("sell_volume_usd", sa.NUMERIC(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("first_transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("first_block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("txn_count", sa.BIGINT(), nullable=True),
        sa.Column("opensea_order_count", sa.BIGINT(), nullable=True),
        sa.Column("volume_usd", sa.NUMERIC(), nullable=True),
        sa.PrimaryKeyConstraint("address"),
    )
    op.alter_column(
        "address_nft_1155_holders",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("address_nft_1155_holders_token_address_balance_of_idx", table_name="address_nft_1155_holders")
    op.alter_column(
        "address_nft_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "address_token_holders",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("address_token_holders_token_address_balance_of_idx", table_name="address_token_holders")
    op.alter_column(
        "address_token_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "address_transactions",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("address_transactions_address_block_timestamp_block_number_t_idx", table_name="address_transactions")
    op.drop_index("address_transactions_address_txn_type_block_timestamp_block_idx", table_name="address_transactions")
    op.create_unique_constraint(None, "af_ens_node_current", ["node"])
    op.alter_column(
        "token_address_nft_inventories",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index(
        "token_address_nft_inventories_wallet_address_token_address__idx", table_name="token_address_nft_inventories"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(
        "token_address_nft_inventories_wallet_address_token_address__idx",
        "token_address_nft_inventories",
        ["wallet_address", "token_address", "token_id"],
        unique=False,
    )
    op.alter_column(
        "token_address_nft_inventories",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_constraint(None, "af_ens_node_current", type_="unique")
    op.create_index(
        "address_transactions_address_txn_type_block_timestamp_block_idx",
        "address_transactions",
        [
            "address",
            "txn_type",
            sa.text("block_timestamp DESC"),
            sa.text("block_number DESC"),
            sa.text("transaction_index DESC"),
        ],
        unique=False,
    )
    op.create_index(
        "address_transactions_address_block_timestamp_block_number_t_idx",
        "address_transactions",
        ["address", sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
    )
    op.alter_column(
        "address_transactions",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "address_token_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.create_index(
        "address_token_holders_token_address_balance_of_idx",
        "address_token_holders",
        ["token_address", sa.text("balance_of DESC")],
        unique=False,
    )
    op.alter_column(
        "address_token_holders",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "address_nft_transfers",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.create_index(
        "address_nft_1155_holders_token_address_balance_of_idx",
        "address_nft_1155_holders",
        ["token_address", "token_id", sa.text("balance_of DESC")],
        unique=False,
    )
    op.alter_column(
        "address_nft_1155_holders",
        "create_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_table("af_opensea_profile")
    op.drop_table("af_opensea_na_scheduled_metadata")
    op.drop_table("af_opensea_na_orders")
    op.drop_table("af_opensea_na_crypto_token_mapping")
    op.drop_table("af_opensea_daily_transactions")
    op.drop_table("af_opensea__transactions")
    # ### end Alembic commands ###
