"""ens

Revision ID: 43d14640a8ac
Revises: 2359a28d63cb
Create Date: 2024-09-05 11:08:15.501786

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '43d14640a8ac'
down_revision: Union[str, None] = '2359a28d63cb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('af_ens_address_current',
    sa.Column('address', postgresql.BYTEA(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('reverse_node', postgresql.BYTEA(), nullable=True),
    sa.Column('block_number', sa.BIGINT(), nullable=True),
    sa.Column('create_time', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_time', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('address')
    )
    op.create_table('af_ens_event',
    sa.Column('transaction_hash', postgresql.BYTEA(), nullable=False),
    sa.Column('transaction_index', sa.Integer(), nullable=True),
    sa.Column('log_index', sa.Integer(), nullable=False),
    sa.Column('block_number', sa.BIGINT(), nullable=True),
    sa.Column('block_hash', postgresql.BYTEA(), nullable=True),
    sa.Column('block_timestamp', sa.TIMESTAMP(), nullable=True),
    sa.Column('method', sa.String(), nullable=True),
    sa.Column('event_name', sa.String(), nullable=True),
    sa.Column('topic0', sa.String(), nullable=True),
    sa.Column('from_address', postgresql.BYTEA(), nullable=True),
    sa.Column('to_address', postgresql.BYTEA(), nullable=True),
    sa.Column('base_node', postgresql.BYTEA(), nullable=True),
    sa.Column('node', postgresql.BYTEA(), nullable=True),
    sa.Column('label', postgresql.BYTEA(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('expires', sa.TIMESTAMP(), nullable=True),
    sa.Column('owner', postgresql.BYTEA(), nullable=True),
    sa.Column('resolver', postgresql.BYTEA(), nullable=True),
    sa.Column('registrant', postgresql.BYTEA(), nullable=True),
    sa.Column('address', postgresql.BYTEA(), nullable=True),
    sa.Column('reverse_base_node', postgresql.BYTEA(), nullable=True),
    sa.Column('reverse_node', postgresql.BYTEA(), nullable=True),
    sa.Column('reverse_label', postgresql.BYTEA(), nullable=True),
    sa.Column('reverse_name', sa.String(), nullable=True),
    sa.Column('token_id', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('w_token_id', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('create_time', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_time', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('reorg', sa.BOOLEAN(), nullable=True),
    sa.PrimaryKeyConstraint('transaction_hash', 'log_index', name='ens_tnx_log_index')
    )
    op.create_index('ens_event_address', 'af_ens_event', ['from_address'], unique=False)
    op.create_index('ens_idx_block_number_log_index', 'af_ens_event', ['block_number', sa.text('log_index DESC')], unique=False)
    op.create_table('af_ens_node_current',
    sa.Column('node', postgresql.BYTEA(), nullable=False),
    sa.Column('token_id', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('w_token_id', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('first_owned_by', postgresql.BYTEA(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('registration', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('expires', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('address', postgresql.BYTEA(), nullable=True),
    sa.Column('create_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('node'),
    sa.UniqueConstraint('node')
    )
    op.create_index('ens_idx_address', 'af_ens_node_current', ['address'], unique=False)
    op.create_index('ens_idx_name', 'af_ens_node_current', ['name'], unique=False)
    op.create_table('af_opensea__transactions',
    sa.Column('address', postgresql.BYTEA(), nullable=False),
    sa.Column('is_offer', sa.BOOLEAN(), nullable=False),
    sa.Column('related_address', postgresql.BYTEA(), nullable=True),
    sa.Column('transaction_type', sa.SMALLINT(), nullable=True),
    sa.Column('order_hash', postgresql.BYTEA(), nullable=True),
    sa.Column('zone', postgresql.BYTEA(), nullable=True),
    sa.Column('offer', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('consideration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('fee', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('create_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('transaction_hash', postgresql.BYTEA(), nullable=True),
    sa.Column('block_number', sa.BIGINT(), nullable=False),
    sa.Column('log_index', sa.BIGINT(), nullable=False),
    sa.Column('block_timestamp', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('block_hash', postgresql.BYTEA(), nullable=False),
    sa.Column('reorg', sa.BOOLEAN(), nullable=True),
    sa.PrimaryKeyConstraint('address', 'is_offer', 'block_number', 'log_index', 'block_hash')
    )
    op.create_table('af_opensea_daily_transactions',
    sa.Column('address', postgresql.BYTEA(), nullable=False),
    sa.Column('related_address', postgresql.BYTEA(), nullable=True),
    sa.Column('transaction_type', sa.SMALLINT(), nullable=True),
    sa.Column('block_date', sa.Date(), nullable=False),
    sa.Column('buy_txn_count', sa.INTEGER(), nullable=True),
    sa.Column('sell_txn_count', sa.INTEGER(), nullable=True),
    sa.Column('swap_txn_count', sa.INTEGER(), nullable=True),
    sa.Column('buy_txn_volume_crypto', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('sell_txn_volume_crypto', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('buy_txn_volume_usd', sa.NUMERIC(), nullable=True),
    sa.Column('sell_txn_volume_usd', sa.NUMERIC(), nullable=True),
    sa.Column('create_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('address', 'block_date')
    )
    op.create_table('af_opensea_na_orders',
    sa.Column('order_hash', postgresql.BYTEA(), nullable=True),
    sa.Column('zone', postgresql.BYTEA(), nullable=True),
    sa.Column('offerer', postgresql.BYTEA(), nullable=True),
    sa.Column('recipient', postgresql.BYTEA(), nullable=True),
    sa.Column('offer', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('consideration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('create_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('transaction_hash', postgresql.BYTEA(), nullable=True),
    sa.Column('block_number', sa.BIGINT(), nullable=False),
    sa.Column('log_index', sa.BIGINT(), nullable=False),
    sa.Column('block_timestamp', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('block_hash', postgresql.BYTEA(), nullable=False),
    sa.Column('reorg', sa.BOOLEAN(), nullable=True),
    sa.PrimaryKeyConstraint('block_number', 'log_index', 'block_hash')
    )
    op.drop_table('token_prices')
    op.drop_table('token_hourly_prices')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('token_hourly_prices',
    sa.Column('symbol', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('symbol', 'timestamp', name='token_hourly_prices_pkey')
    )
    op.create_table('token_prices',
    sa.Column('symbol', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('symbol', 'timestamp', name='token_prices_pkey')
    )
    op.drop_table('af_opensea_na_orders')
    op.drop_table('af_opensea_daily_transactions')
    op.drop_table('af_opensea__transactions')
    op.drop_index('ens_idx_name', table_name='af_ens_node_current')
    op.drop_index('ens_idx_address', table_name='af_ens_node_current')
    op.drop_table('af_ens_node_current')
    op.drop_index('ens_idx_block_number_log_index', table_name='af_ens_event')
    op.drop_index('ens_event_address', table_name='af_ens_event')
    op.drop_table('af_ens_event')
    op.drop_table('af_ens_address_current')
    # ### end Alembic commands ###
