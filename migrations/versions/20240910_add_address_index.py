"""add address index

Revision ID: e8f78802f27a
Revises: f4efa18760cc
Create Date: 2024-09-10 16:27:52.477748

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "e8f78802f27a"
down_revision: Union[str, None] = "f4efa18760cc"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "address_nft_1155_holders",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_id", sa.NUMERIC(precision=100), nullable=False),
        sa.Column("balance_of", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address", "token_address", "token_id"),
        if_not_exists=True,
    )
    op.create_index(
        "address_nft_1155_holders_token_address_balance_of_idx",
        "address_nft_1155_holders",
        ["token_address", "token_id", sa.text("balance_of DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_table(
        "address_nft_transfers",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("block_number", sa.INTEGER(), nullable=False),
        sa.Column("log_index", sa.INTEGER(), nullable=False),
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("block_hash", postgresql.BYTEA(), nullable=False),
        sa.Column("token_address", postgresql.BYTEA(), nullable=True),
        sa.Column("related_address", postgresql.BYTEA(), nullable=True),
        sa.Column("transfer_type", sa.SMALLINT(), nullable=True),
        sa.Column("token_id", sa.NUMERIC(precision=100), nullable=False),
        sa.Column("value", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address", "block_number", "log_index", "block_timestamp", "block_hash", "token_id"),
        if_not_exists=True,
    )
    op.create_table(
        "address_token_holders",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("balance_of", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address", "token_address"),
        if_not_exists=True,
    )
    op.create_index(
        "address_token_holders_token_address_balance_of_idx",
        "address_token_holders",
        ["token_address", sa.text("balance_of DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_table(
        "address_token_transfers",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("block_number", sa.INTEGER(), nullable=False),
        sa.Column("log_index", sa.INTEGER(), nullable=False),
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("block_hash", postgresql.BYTEA(), nullable=False),
        sa.Column("token_address", postgresql.BYTEA(), nullable=True),
        sa.Column("related_address", postgresql.BYTEA(), nullable=True),
        sa.Column("transfer_type", sa.SMALLINT(), nullable=True),
        sa.Column("value", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address", "block_number", "log_index", "block_timestamp", "block_hash"),
        if_not_exists=True,
    )
    op.create_table(
        "address_transactions",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("block_number", sa.INTEGER(), nullable=False),
        sa.Column("transaction_index", sa.INTEGER(), nullable=False),
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("block_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("txn_type", sa.SMALLINT(), nullable=True),
        sa.Column("related_address", postgresql.BYTEA(), nullable=True),
        sa.Column("value", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("transaction_fee", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("receipt_status", sa.INTEGER(), nullable=True),
        sa.Column("method", sa.TEXT(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address", "block_number", "transaction_index", "block_timestamp"),
        if_not_exists=True,
    )
    op.create_index(
        "address_transactions_address_block_timestamp_block_number_t_idx",
        "address_transactions",
        ["address", sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "address_transactions_address_txn_type_block_timestamp_block_idx",
        "address_transactions",
        [
            "address",
            "txn_type",
            sa.text("block_timestamp DESC"),
            sa.text("block_number DESC"),
            sa.text("transaction_index DESC"),
        ],
        unique=False,
        if_not_exists=True,
    )
    op.create_table(
        "token_address_nft_inventories",
        sa.Column("token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_id", sa.NUMERIC(precision=100), nullable=False),
        sa.Column("wallet_address", postgresql.BYTEA(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("token_address", "token_id"),
        if_not_exists=True,
    )
    op.create_index(
        "token_address_nft_inventories_wallet_address_token_address__idx",
        "token_address_nft_inventories",
        ["wallet_address", "token_address", "token_id"],
        unique=False,
        if_not_exists=True,
    )


# ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "token_address_nft_inventories_wallet_address_token_address__idx", table_name="token_address_nft_inventories"
    )
    op.drop_table("token_address_nft_inventories")
    op.drop_index("address_transactions_address_txn_type_block_timestamp_block_idx", table_name="address_transactions")
    op.drop_index("address_transactions_address_block_timestamp_block_number_t_idx", table_name="address_transactions")
    op.drop_table("address_transactions")
    op.drop_table("address_token_transfers")
    op.drop_index("address_token_holders_token_address_balance_of_idx", table_name="address_token_holders")
    op.drop_table("address_token_holders")
    op.drop_table("address_nft_transfers")
    op.drop_index("address_nft_1155_holders_token_address_balance_of_idx", table_name="address_nft_1155_holders")
    op.drop_table("address_nft_1155_holders")
    # ### end Alembic commands ###
