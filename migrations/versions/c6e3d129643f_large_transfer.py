"""large_transfer

Revision ID: c6e3d129643f
Revises: f4efa18760cc
Create Date: 2024-09-10 17:37:35.429564

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c6e3d129643f'
down_revision: Union[str, None] = 'f4efa18760cc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('af_opensea_na_crypto_token_mapping',
    sa.Column('address_var', sa.VARCHAR(), nullable=False),
    sa.Column('price_symbol', sa.VARCHAR(), nullable=True),
    sa.Column('decimals', sa.INTEGER(), nullable=True),
    sa.PrimaryKeyConstraint('address_var')
    )
    op.create_table('af_opensea_na_scheduled_metadata',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('dag_id', sa.String(), nullable=True),
    sa.Column('execution_date', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('last_data_timestamp', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('af_opensea_profile',
    sa.Column('address', postgresql.BYTEA(), nullable=False),
    sa.Column('buy_txn_count', sa.BIGINT(), nullable=True),
    sa.Column('sell_txn_count', sa.BIGINT(), nullable=True),
    sa.Column('swap_txn_count', sa.BIGINT(), nullable=True),
    sa.Column('buy_opensea_order_count', sa.BIGINT(), nullable=True),
    sa.Column('sell_opensea_order_count', sa.BIGINT(), nullable=True),
    sa.Column('swap_opensea_order_count', sa.BIGINT(), nullable=True),
    sa.Column('buy_nft_stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('sell_nft_stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('buy_volume_usd', sa.NUMERIC(), nullable=True),
    sa.Column('sell_volume_usd', sa.NUMERIC(), nullable=True),
    sa.Column('create_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('first_transaction_hash', postgresql.BYTEA(), nullable=True),
    sa.Column('first_block_timestamp', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('txn_count', sa.BIGINT(), nullable=True),
    sa.Column('opensea_order_count', sa.BIGINT(), nullable=True),
    sa.Column('volume_usd', sa.NUMERIC(), nullable=True),
    sa.PrimaryKeyConstraint('address')
    )
    op.create_table('af_token_deposits__transactions',
    sa.Column('transaction_hash', postgresql.BYTEA(), nullable=False),
    sa.Column('wallet_address', postgresql.BYTEA(), nullable=True),
    sa.Column('chain_id', sa.BIGINT(), nullable=True),
    sa.Column('contract_address', postgresql.BYTEA(), nullable=True),
    sa.Column('token_address', postgresql.BYTEA(), nullable=True),
    sa.Column('value', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('block_number', sa.BIGINT(), nullable=True),
    sa.Column('block_timestamp', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('create_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('reorg', sa.BOOLEAN(), server_default=sa.text('False'), nullable=True),
    sa.PrimaryKeyConstraint('transaction_hash')
    )
    op.create_index('af_deposits_transactions_block_number_index', 'af_token_deposits__transactions', [sa.text('block_number DESC')], unique=False)
    op.create_index('af_deposits_transactions_chain_id_index', 'af_token_deposits__transactions', ['chain_id'], unique=False)
    op.create_index('af_deposits_transactions_contract_address_index', 'af_token_deposits__transactions', ['contract_address'], unique=False)
    op.create_index('af_deposits_transactions_token_address_index', 'af_token_deposits__transactions', ['token_address'], unique=False)
    op.create_index('af_deposits_transactions_wallet_address_index', 'af_token_deposits__transactions', ['wallet_address'], unique=False)
    op.create_table('af_token_deposits_current',
    sa.Column('wallet_address', postgresql.BYTEA(), nullable=False),
    sa.Column('chain_id', sa.BIGINT(), nullable=False),
    sa.Column('contract_address', postgresql.BYTEA(), nullable=False),
    sa.Column('token_address', postgresql.BYTEA(), nullable=False),
    sa.Column('value', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('block_number', sa.BIGINT(), nullable=True),
    sa.Column('block_timestamp', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('create_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('wallet_address', 'token_address', 'contract_address', 'chain_id')
    )
    op.create_table('large_transfer_address',
    sa.Column('address', postgresql.BYTEA(), nullable=False),
    sa.Column('token_address', postgresql.BYTEA(), nullable=False),
    sa.Column('transaction_count', sa.INTEGER(), server_default='0', nullable=True),
    sa.Column('amount_in', sa.BIGINT(), nullable=True),
    sa.Column('amount_out', sa.BIGINT(), nullable=True),
    sa.Column('balance', sa.BIGINT(), sa.Computed('amount_in - amount_out', ), nullable=True),
    sa.Column('block_number', sa.INTEGER(), nullable=True),
    sa.Column('create_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('address', 'token_address', name='large_transfer_address_token_address')
    )
    op.create_table('large_transfer_transactions',
    sa.Column('transaction_hash', postgresql.BYTEA(), nullable=False),
    sa.Column('transaction_index', sa.INTEGER(), nullable=True),
    sa.Column('from_address', postgresql.BYTEA(), nullable=True),
    sa.Column('to_address', postgresql.BYTEA(), nullable=True),
    sa.Column('value', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('transaction_type', sa.INTEGER(), nullable=True),
    sa.Column('input', postgresql.BYTEA(), nullable=True),
    sa.Column('method_id', sa.VARCHAR(), sa.Computed('substring((input)::varchar for 8)::bigint::varchar', ), nullable=True),
    sa.Column('nonce', sa.INTEGER(), nullable=True),
    sa.Column('block_hash', postgresql.BYTEA(), nullable=True),
    sa.Column('block_number', sa.BIGINT(), nullable=True),
    sa.Column('block_timestamp', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('gas', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('gas_price', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('max_fee_per_gas', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('max_priority_fee_per_gas', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('exist_error', sa.BOOLEAN(), nullable=True),
    sa.Column('error', sa.TEXT(), nullable=True),
    sa.Column('revert_reason', sa.TEXT(), nullable=True),
    sa.Column('create_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('reorg', sa.BOOLEAN(), nullable=True),
    sa.PrimaryKeyConstraint('transaction_hash')
    )
    op.create_table('token_hourly_prices',
    sa.Column('symbol', sa.String(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('price', sa.Numeric(), nullable=True),
    sa.PrimaryKeyConstraint('symbol', 'timestamp')
    )
    op.create_table('token_prices',
    sa.Column('symbol', sa.String(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('price', sa.Numeric(), nullable=True),
    sa.PrimaryKeyConstraint('symbol', 'timestamp')
    )
    op.create_unique_constraint(None, 'af_ens_node_current', ['node'])
    op.add_column('af_opensea__transactions', sa.Column('protocol_version', sa.VARCHAR(), server_default='1.6', nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('buy_opensea_order_count', sa.INTEGER(), nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('sell_opensea_order_count', sa.INTEGER(), nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('swap_opensea_order_count', sa.INTEGER(), nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('buy_nft_stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('sell_nft_stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('buy_volume_crypto', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('sell_volume_crypto', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('buy_volume_usd', sa.NUMERIC(), nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('sell_volume_usd', sa.NUMERIC(), nullable=True))
    op.drop_column('af_opensea_daily_transactions', 'transaction_type')
    op.drop_column('af_opensea_daily_transactions', 'buy_txn_volume_crypto')
    op.drop_column('af_opensea_daily_transactions', 'buy_txn_volume_usd')
    op.drop_column('af_opensea_daily_transactions', 'sell_txn_volume_usd')
    op.drop_column('af_opensea_daily_transactions', 'related_address')
    op.drop_column('af_opensea_daily_transactions', 'sell_txn_volume_crypto')
    op.add_column('af_opensea_na_orders', sa.Column('protocol_version', sa.VARCHAR(), server_default='1.6', nullable=True))
    op.add_column('contracts', sa.Column('deployed_code_hash', postgresql.TIMESTAMP(), sa.Computed("encode(digest('0x'||encode(deployed_code, 'hex'), 'sha256'), 'hex')", ), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('contracts', 'deployed_code_hash')
    op.drop_column('af_opensea_na_orders', 'protocol_version')
    op.add_column('af_opensea_daily_transactions', sa.Column('sell_txn_volume_crypto', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('related_address', postgresql.BYTEA(), autoincrement=False, nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('sell_txn_volume_usd', sa.NUMERIC(), autoincrement=False, nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('buy_txn_volume_usd', sa.NUMERIC(), autoincrement=False, nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('buy_txn_volume_crypto', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('af_opensea_daily_transactions', sa.Column('transaction_type', sa.SMALLINT(), autoincrement=False, nullable=True))
    op.drop_column('af_opensea_daily_transactions', 'sell_volume_usd')
    op.drop_column('af_opensea_daily_transactions', 'buy_volume_usd')
    op.drop_column('af_opensea_daily_transactions', 'sell_volume_crypto')
    op.drop_column('af_opensea_daily_transactions', 'buy_volume_crypto')
    op.drop_column('af_opensea_daily_transactions', 'sell_nft_stats')
    op.drop_column('af_opensea_daily_transactions', 'buy_nft_stats')
    op.drop_column('af_opensea_daily_transactions', 'swap_opensea_order_count')
    op.drop_column('af_opensea_daily_transactions', 'sell_opensea_order_count')
    op.drop_column('af_opensea_daily_transactions', 'buy_opensea_order_count')
    op.drop_column('af_opensea__transactions', 'protocol_version')
    op.drop_constraint(None, 'af_ens_node_current', type_='unique')
    op.drop_table('token_prices')
    op.drop_table('token_hourly_prices')
    op.drop_table('large_transfer_transactions')
    op.drop_table('large_transfer_address')
    op.drop_table('af_token_deposits_current')
    op.drop_index('af_deposits_transactions_wallet_address_index', table_name='af_token_deposits__transactions')
    op.drop_index('af_deposits_transactions_token_address_index', table_name='af_token_deposits__transactions')
    op.drop_index('af_deposits_transactions_contract_address_index', table_name='af_token_deposits__transactions')
    op.drop_index('af_deposits_transactions_chain_id_index', table_name='af_token_deposits__transactions')
    op.drop_index('af_deposits_transactions_block_number_index', table_name='af_token_deposits__transactions')
    op.drop_table('af_token_deposits__transactions')
    op.drop_table('af_opensea_profile')
    op.drop_table('af_opensea_na_scheduled_metadata')
    op.drop_table('af_opensea_na_crypto_token_mapping')
    # ### end Alembic commands ###
