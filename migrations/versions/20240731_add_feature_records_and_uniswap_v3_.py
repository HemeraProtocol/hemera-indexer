"""add feature records and uniswap v3 feature

Revision ID: 3d5ce8939570
Revises: 0b922153e040
Create Date: 2024-07-31 10:37:12.548772

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "3d5ce8939570"
down_revision: Union[str, None] = "0b922153e040"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "all_feature_value_records",
        sa.Column("feature_id", sa.NUMERIC(precision=100), nullable=False),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("value", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("block_number", "feature_id", "address"),
    )
    op.create_index(
        "all_feature_value_records_feature_block_index",
        "all_feature_value_records",
        ["feature_id", sa.text("block_number DESC")],
        unique=False,
    )
    op.create_table(
        "feature_uniswap_v3_pools",
        sa.Column("nft_address", postgresql.BYTEA(), nullable=False),
        sa.Column("pool_address", postgresql.BYTEA(), nullable=False),
        sa.Column("token0_address", postgresql.BYTEA(), nullable=True),
        sa.Column("token1_address", postgresql.BYTEA(), nullable=True),
        sa.Column("fee", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("tick_spacing", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("mint_block_number", sa.BIGINT(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("nft_address", "pool_address"),
    )
    op.create_table(
        "feature_uniswap_v3_tokens",
        sa.Column("nft_address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_id", sa.NUMERIC(precision=100), nullable=False),
        sa.Column("pool_address", postgresql.BYTEA(), nullable=True),
        sa.Column("tick_lower", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("tick_upper", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("fee", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("mint_block_number", sa.BIGINT(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("nft_address", "token_id"),
    )
    op.create_index(
        "feature_uniswap_v3_tokens_nft_index",
        "feature_uniswap_v3_tokens",
        ["nft_address"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("feature_uniswap_v3_tokens_nft_index", table_name="feature_uniswap_v3_tokens")
    op.drop_table("feature_uniswap_v3_tokens")
    op.drop_table("feature_uniswap_v3_pools")
    op.drop_index(
        "all_feature_value_records_feature_block_index",
        table_name="all_feature_value_records",
    )
    op.drop_table("all_feature_value_records")
    # ### end Alembic commands ###
