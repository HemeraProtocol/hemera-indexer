"""lido_share_balance_d,lido_position_values_d,lido_share_balance_current_d,ether_fi_share_balance_d,ether_fi_share_balance_current_d,ether_fi_position_values_d,ether_fi_lrt_exchange_rate_d,pendle_pool_d,pendle_user_active_balance_d,pendle_user_active_balance_current_d

Revision ID: d6b539eaa962
Revises: 3bd2e3099bae
Create Date: 2024-12-09 11:10:46.035839

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d6b539eaa962"
down_revision: Union[str, None] = "3bd2e3099bae"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "af_eigen_layer_address_current",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("strategy", postgresql.BYTEA(), nullable=False),
        sa.Column("token", postgresql.BYTEA(), nullable=True),
        sa.Column("deposit_amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("start_withdraw_amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("finish_withdraw_amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address", "strategy"),
        if_not_exists=True,
    )
    op.create_table(
        "af_eigen_layer_records",
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=False),
        sa.Column("log_index", sa.INTEGER(), nullable=False),
        sa.Column("internal_idx", sa.INTEGER(), nullable=False),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("method", sa.VARCHAR(), nullable=True),
        sa.Column("event_name", sa.VARCHAR(), nullable=True),
        sa.Column("strategy", postgresql.BYTEA(), nullable=True),
        sa.Column("token", postgresql.BYTEA(), nullable=True),
        sa.Column("staker", postgresql.BYTEA(), nullable=True),
        sa.Column("shares", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("withdrawer", postgresql.BYTEA(), nullable=True),
        sa.Column("withdrawroot", postgresql.BYTEA(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.PrimaryKeyConstraint("transaction_hash", "log_index", "internal_idx"),
        if_not_exists=True,
    )
    op.create_table(
        "af_erc20_total_supply_current",
        sa.Column("token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("block_timestamp", sa.BIGINT(), nullable=True),
        sa.Column("total_supply", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("token_address"),
        if_not_exists=True,
    )
    op.create_table(
        "af_erc20_total_supply_hist",
        sa.Column("token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("block_timestamp", sa.BIGINT(), nullable=False),
        sa.Column("total_supply", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), nullable=True),
        sa.PrimaryKeyConstraint("token_address", "block_timestamp", "block_number"),
        if_not_exists=True,
    )
    op.create_table(
        "af_ether_fi_lrt_exchange_rate",
        sa.Column("token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("exchange_rate", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.PrimaryKeyConstraint("token_address", "block_number"),
        if_not_exists=True,
    )
    op.create_table(
        "af_ether_fi_position_values",
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("total_share", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("total_value_out_lp", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("total_value_in_lp", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.PrimaryKeyConstraint("block_number"),
        if_not_exists=True,
    )
    op.create_table(
        "af_ether_fi_share_balances",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("shares", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.PrimaryKeyConstraint("address", "token_address", "block_number"),
        if_not_exists=True,
    )
    op.create_table(
        "af_ether_fi_share_balances_current",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("shares", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.PrimaryKeyConstraint("address", "token_address"),
        if_not_exists=True,
    )
    op.create_table(
        "af_karak_address_current",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("vault", postgresql.BYTEA(), nullable=False),
        sa.Column("deposit_amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("start_withdraw_amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("finish_withdraw_amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("d_s", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("d_f", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("s_f", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address", "vault"),
        if_not_exists=True,
    )
    op.create_table(
        "af_karak_records",
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=False),
        sa.Column("log_index", sa.INTEGER(), nullable=False),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("method", sa.VARCHAR(), nullable=True),
        sa.Column("event_name", sa.VARCHAR(), nullable=True),
        sa.Column("topic0", sa.VARCHAR(), nullable=True),
        sa.Column("from_address", postgresql.BYTEA(), nullable=True),
        sa.Column("to_address", postgresql.BYTEA(), nullable=True),
        sa.Column("token", sa.VARCHAR(), nullable=True),
        sa.Column("vault", postgresql.BYTEA(), nullable=True),
        sa.Column("amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("balance", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("staker", sa.VARCHAR(), nullable=True),
        sa.Column("operator", sa.VARCHAR(), nullable=True),
        sa.Column("withdrawer", sa.VARCHAR(), nullable=True),
        sa.Column("shares", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("withdrawroot", sa.VARCHAR(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.PrimaryKeyConstraint("transaction_hash", "log_index"),
        if_not_exists=True,
    )
    op.create_table(
        "af_karak_vault_token",
        sa.Column("vault", postgresql.BYTEA(), nullable=False),
        sa.Column("token", postgresql.BYTEA(), nullable=False),
        sa.Column("name", sa.VARCHAR(), nullable=True),
        sa.Column("symbol", sa.VARCHAR(), nullable=True),
        sa.Column("asset_type", sa.INTEGER(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("vault", "token"),
        if_not_exists=True,
    )
    op.create_table(
        "af_lido_position_values",
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("total_share", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("buffered_eth", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("consensus_layer", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("deposited_validators", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("cl_validators", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.PrimaryKeyConstraint("block_number"),
        if_not_exists=True,
    )
    op.create_table(
        "af_lido_seth_share_balances",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("shares", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.PrimaryKeyConstraint("address", "token_address", "block_number"),
        if_not_exists=True,
    )
    op.create_table(
        "af_lido_seth_share_balances_current",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("shares", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.PrimaryKeyConstraint("address", "token_address"),
        if_not_exists=True,
    )
    op.create_table(
        "af_pendle_pool",
        sa.Column("market_address", postgresql.BYTEA(), nullable=False),
        sa.Column("sy_address", postgresql.BYTEA(), nullable=True),
        sa.Column("pt_address", postgresql.BYTEA(), nullable=True),
        sa.Column("yt_address", postgresql.BYTEA(), nullable=True),
        sa.Column("underlying_asset", postgresql.BYTEA(), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("chain_id", sa.BIGINT(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("market_address"),
        if_not_exists=True,
    )
    op.create_table(
        "af_pendle_user_active_balance",
        sa.Column("market_address", postgresql.BYTEA(), nullable=False),
        sa.Column("user_address", postgresql.BYTEA(), nullable=False),
        sa.Column("sy_balance", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("active_balance", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("total_active_supply", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("market_sy_balance", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("chain_id", sa.BIGINT(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("market_address", "user_address", "block_number"),
        if_not_exists=True,
    )
    op.create_table(
        "af_pendle_user_active_balance_current",
        sa.Column("market_address", postgresql.BYTEA(), nullable=False),
        sa.Column("user_address", postgresql.BYTEA(), nullable=False),
        sa.Column("sy_balance", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("active_balance", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("total_active_supply", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("market_sy_balance", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("chain_id", sa.BIGINT(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("market_address", "user_address"),
        if_not_exists=True,
    )
    op.create_table(
        "af_project_contracts",
        sa.Column("project_id", sa.VARCHAR(), nullable=True),
        sa.Column("chain_id", sa.INTEGER(), nullable=True),
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("deployer", postgresql.BYTEA(), nullable=True),
        sa.Column("transaction_from_address", postgresql.BYTEA(), nullable=True),
        sa.Column("trace_creator", postgresql.BYTEA(), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), server_default=sa.text("false"), nullable=True),
        sa.PrimaryKeyConstraint("address"),
        if_not_exists=True,
    )
    op.create_table(
        "af_projects",
        sa.Column("project_id", sa.VARCHAR(), nullable=False),
        sa.Column("name", sa.VARCHAR(), nullable=True),
        sa.Column("deployer", postgresql.BYTEA(), nullable=False),
        sa.Column("address_type", sa.INTEGER(), nullable=True, comment="0是作为deploy地址不参与统计；1参与统计"),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("project_id", "deployer"),
        if_not_exists=True,
    )
    op.create_table(
        "af_staked_transferred_balance_current",
        sa.Column("contract_address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("wallet_address", postgresql.BYTEA(), nullable=False),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("block_timestamp", sa.BIGINT(), nullable=False),
        sa.Column("block_transfer_value", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("block_cumulative_value", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("protocol_id", sa.VARCHAR(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), nullable=True),
        sa.PrimaryKeyConstraint(
            "contract_address", "wallet_address", "token_address", "block_timestamp", "block_number"
        ),
        if_not_exists=True,
    )
    op.create_table(
        "af_staked_transferred_balance_hist",
        sa.Column("contract_address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("wallet_address", postgresql.BYTEA(), nullable=False),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("block_timestamp", sa.BIGINT(), nullable=False),
        sa.Column("block_transfer_value", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("block_cumulative_value", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("protocol_id", sa.VARCHAR(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), nullable=True),
        sa.PrimaryKeyConstraint(
            "contract_address", "wallet_address", "token_address", "block_timestamp", "block_number"
        ),
        if_not_exists=True,
    )
    op.create_table(
        "af_uniswap_v2_pools",
        sa.Column("factory_address", postgresql.BYTEA(), nullable=False),
        sa.Column("pool_address", postgresql.BYTEA(), nullable=False),
        sa.Column("token0_address", postgresql.BYTEA(), nullable=True),
        sa.Column("token1_address", postgresql.BYTEA(), nullable=True),
        sa.Column("length", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("factory_address", "pool_address"),
        if_not_exists=True,
    )
    op.create_table(
        "cyber_address",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("name", sa.VARCHAR(), nullable=True),
        sa.Column("reverse_node", postgresql.BYTEA(), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address"),
        if_not_exists=True,
    )
    op.create_table(
        "cyber_id_record",
        sa.Column("node", postgresql.BYTEA(), nullable=False),
        sa.Column("token_id", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("label", sa.VARCHAR(), nullable=True),
        sa.Column("registration", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("address", postgresql.BYTEA(), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("cost", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("node"),
        if_not_exists=True,
    )
    op.create_table(
        "init_capital_pool_current",
        sa.Column("pool_address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_address", postgresql.BYTEA(), nullable=True),
        sa.Column("total_asset", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("total_supply", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("total_debt", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("total_debt_share", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("pool_address"),
        if_not_exists=True,
    )
    op.create_table(
        "init_capital_pool_history",
        sa.Column("pool_address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_address", postgresql.BYTEA(), nullable=True),
        sa.Column("total_asset", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("total_supply", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("total_debt", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("total_debt_share", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("pool_address", "block_number"),
        if_not_exists=True,
    )
    op.create_table(
        "init_capital_position_current",
        sa.Column("position_id", sa.NUMERIC(precision=100), nullable=False),
        sa.Column("owner_address", postgresql.BYTEA(), nullable=True),
        sa.Column("viewer_address", postgresql.BYTEA(), nullable=True),
        sa.Column("mode", sa.INTEGER(), nullable=True),
        sa.Column("collaterals", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("borrows", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("created_block_number", sa.BIGINT(), nullable=True),
        sa.Column("created_block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("created_transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("created_log_index", sa.INTEGER(), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("position_id"),
        if_not_exists=True,
    )
    op.create_table(
        "init_capital_position_history",
        sa.Column("position_id", sa.NUMERIC(precision=100), nullable=False),
        sa.Column("owner_address", postgresql.BYTEA(), nullable=True),
        sa.Column("viewer_address", postgresql.BYTEA(), nullable=True),
        sa.Column("mode", sa.INTEGER(), nullable=True),
        sa.Column("collaterals", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("borrows", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("position_id", "block_number"),
        if_not_exists=True,
    )
    op.create_table(
        "init_capital_record",
        sa.Column("action_type", sa.SMALLINT(), nullable=True),
        sa.Column("position_id", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("pool_address", postgresql.BYTEA(), nullable=True),
        sa.Column("token_address", postgresql.BYTEA(), nullable=True),
        sa.Column("amount", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("share", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("address", postgresql.BYTEA(), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=False),
        sa.Column("log_index", sa.INTEGER(), nullable=False),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("transaction_hash", "log_index"),
        if_not_exists=True,
    )
    op.drop_table("scheduled_metadata", if_exists=True)
    op.drop_table("feature_uniswap_v2_pools", if_exists=True)
    op.alter_column("address_nft_transfers", "transaction_hash", existing_type=postgresql.BYTEA(), nullable=False)
    op.alter_column("address_token_transfers", "transaction_hash", existing_type=postgresql.BYTEA(), nullable=False)
    op.add_column("af_holding_balance_uniswap_v3_period", sa.Column("pool_address", postgresql.BYTEA(), nullable=False))
    op.drop_column("af_holding_balance_uniswap_v3_period", "position_token_address")
    op.add_column("erc721_token_mint", sa.Column("address", postgresql.BYTEA(), nullable=True))
    op.add_column("erc721_token_mint", sa.Column("log_index", sa.INTEGER(), nullable=True))
    op.alter_column("erc721_token_mint", "transaction_hash", existing_type=postgresql.BYTEA(), nullable=True)
    op.create_index(
        "erc721_token_mint_address_id_index",
        "erc721_token_mint",
        ["token_address", "token_id"],
        unique=False,
        if_not_exists=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("erc721_token_mint_address_id_index", table_name="erc721_token_mint", if_exists=True)
    op.alter_column("erc721_token_mint", "transaction_hash", existing_type=postgresql.BYTEA(), nullable=False)
    op.drop_column("erc721_token_mint", "log_index")
    op.drop_column("erc721_token_mint", "address")
    op.add_column(
        "af_holding_balance_uniswap_v3_period",
        sa.Column("position_token_address", postgresql.BYTEA(), autoincrement=False, nullable=False),
    )
    op.drop_column("af_holding_balance_uniswap_v3_period", "pool_address")
    op.alter_column("address_token_transfers", "transaction_hash", existing_type=postgresql.BYTEA(), nullable=True)
    op.alter_column("address_nft_transfers", "transaction_hash", existing_type=postgresql.BYTEA(), nullable=True)
    op.create_table(
        "feature_uniswap_v2_pools",
        sa.Column("factory_address", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("pool_address", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("token0_address", postgresql.BYTEA(), autoincrement=False, nullable=True),
        sa.Column("token1_address", postgresql.BYTEA(), autoincrement=False, nullable=True),
        sa.Column("length", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
        sa.Column("called_block_number", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column(
            "create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), autoincrement=False, nullable=True
        ),
        sa.Column(
            "update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("factory_address", "pool_address", name="feature_uniswap_v2_pools_pkey"),
        if_not_exists=True,
    )
    op.create_table(
        "scheduled_metadata",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("dag_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("execution_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("last_data_timestamp", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="scheduled_metadata_pkey"),
        if_not_exists=True,
    )
    op.drop_table("init_capital_record", if_exists=True)
    op.drop_table("init_capital_position_history", if_exists=True)
    op.drop_table("init_capital_position_current", if_exists=True)
    op.drop_table("init_capital_pool_history", if_exists=True)
    op.drop_table("init_capital_pool_current", if_exists=True)
    op.drop_table("cyber_id_record", if_exists=True)
    op.drop_table("cyber_address", if_exists=True)
    op.drop_table("af_uniswap_v2_pools", if_exists=True)
    op.drop_table("af_staked_transferred_balance_hist", if_exists=True)
    op.drop_table("af_staked_transferred_balance_current", if_exists=True)
    op.drop_table("af_projects", if_exists=True)
    op.drop_table("af_project_contracts", if_exists=True)
    op.drop_table("af_pendle_user_active_balance_current", if_exists=True)
    op.drop_table("af_pendle_user_active_balance", if_exists=True)
    op.drop_table("af_pendle_pool", if_exists=True)
    op.drop_table("af_lido_seth_share_balances_current", if_exists=True)
    op.drop_table("af_lido_seth_share_balances", if_exists=True)
    op.drop_table("af_lido_position_values", if_exists=True)
    op.drop_table("af_karak_vault_token", if_exists=True)
    op.drop_table("af_karak_records", if_exists=True)
    op.drop_table("af_karak_address_current", if_exists=True)
    op.drop_table("af_ether_fi_share_balances_current", if_exists=True)
    op.drop_table("af_ether_fi_share_balances", if_exists=True)
    op.drop_table("af_ether_fi_position_values", if_exists=True)
    op.drop_table("af_ether_fi_lrt_exchange_rate", if_exists=True)
    op.drop_table("af_erc20_total_supply_hist", if_exists=True)
    op.drop_table("af_erc20_total_supply_current", if_exists=True)
    op.drop_table("af_eigen_layer_records", if_exists=True)
    op.drop_table("af_eigen_layer_address_current", if_exists=True)
    # ### end Alembic commands ###
