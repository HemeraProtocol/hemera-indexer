"""add daily wallet address tables

Revision ID: 4ba6308d2b25
Revises: b86e241b5e18
Create Date: 2024-08-08 18:50:54.028631

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "4ba6308d2b25"
down_revision: Union[str, None] = "b86e241b5e18"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "daily_wallet_addresses_aggregates",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("block_date", sa.DATE(), nullable=False),
        sa.Column("txn_count", sa.INTEGER(), nullable=True),
        sa.Column("gas_used", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("contract_deployed_count", sa.INTEGER(), nullable=True),
        sa.Column("unique_address_interacted_count", sa.INTEGER(), nullable=True),
        sa.PrimaryKeyConstraint("address", "block_date"),
    )
    op.create_table(
        "period_wallet_addresses_aggregates",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("period_date", sa.DATE(), nullable=False),
        sa.Column("txn_count", sa.INTEGER(), nullable=True),
        sa.Column("gas_used", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("contract_deployed_count", sa.INTEGER(), nullable=True),
        sa.Column("unique_address_interacted_count", sa.INTEGER(), nullable=True),
        sa.PrimaryKeyConstraint("address", "period_date"),
    )
    op.drop_table("transactions_test")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "transactions_test",
        sa.Column("hash", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("transaction_index", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("from_address", postgresql.BYTEA(), autoincrement=False, nullable=True),
        sa.Column("to_address", postgresql.BYTEA(), autoincrement=False, nullable=True),
        sa.Column("value", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
        sa.Column("transaction_type", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("input", postgresql.BYTEA(), autoincrement=False, nullable=True),
        sa.Column("nonce", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("block_hash", postgresql.BYTEA(), autoincrement=False, nullable=True),
        sa.Column("block_number", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("gas", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
        sa.Column("gas_price", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
        sa.Column("max_fee_per_gas", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
        sa.Column("max_priority_fee_per_gas", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
        sa.Column("receipt_root", postgresql.BYTEA(), autoincrement=False, nullable=True),
        sa.Column("receipt_status", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("receipt_gas_used", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
        sa.Column(
            "receipt_cumulative_gas_used", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True
        ),
        sa.Column(
            "receipt_effective_gas_price", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True
        ),
        sa.Column("receipt_l1_fee", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
        sa.Column("receipt_l1_fee_scalar", sa.NUMERIC(precision=100, scale=18), autoincrement=False, nullable=True),
        sa.Column("receipt_l1_gas_used", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
        sa.Column("receipt_l1_gas_price", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
        sa.Column("receipt_blob_gas_used", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
        sa.Column("receipt_blob_gas_price", sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
        sa.Column("blob_versioned_hashes", postgresql.ARRAY(postgresql.BYTEA()), autoincrement=False, nullable=True),
        sa.Column("receipt_contract_address", postgresql.BYTEA(), autoincrement=False, nullable=True),
        sa.Column("exist_error", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("error", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("revert_reason", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "method_id",
            sa.VARCHAR(),
            sa.Computed("substr(((input)::character varying)::text, 3, 8)", persisted=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("hash", name="transactions_test_pkey"),
    )
    op.drop_table("period_wallet_addresses_aggregates")
    op.drop_table("daily_wallet_addresses_aggregates")
    # ### end Alembic commands ###
