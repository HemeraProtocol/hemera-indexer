"""base version

Revision ID: 82fec582601a
Revises: 
Create Date: 2024-06-13 13:58:19.682464

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '82fec582601a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('daily_addresses_aggregates')
    op.drop_table('daily_bridge_transactions_aggregates')
    op.drop_table('wallet_addresses')
    op.drop_table('defi_wallet_protocol_transfer_rules')
    op.drop_table('defi_wallet_protocol_daily_detail')
    op.drop_table('defi_protocol_level_data')
    op.drop_table('nft_campaign')
    op.drop_table('daily_da_transactions_aggregates')
    op.drop_table('zkevm_batches')
    op.drop_table('nft_campaign_challenge')
    op.drop_table('defi_contract_daily_detail_1')
    op.drop_table('scheduled_token_count_metadata')
    op.drop_table('data_store_tx_mapping')
    op.drop_table('mantle_batches')
    op.drop_table('op_bedrock_state_batches')
    op.drop_table('l1_to_l2_txns')
    op.drop_table('scheduled_wallet_count_metadata')
    op.drop_table('l2_to_l1_bridge_transactions')
    op.drop_table('daily_transactions_count')
    op.drop_table('defi_protocol_meth_level_data')
    op.drop_table('defi_wallet_meth_daily_detail')
    op.drop_table('daily_transactions_aggregates')
    op.drop_table('nft_campaign_entry')
    op.drop_table('op_da_transactions')
    op.drop_table('protocol_liquidity_info')
    op.drop_table('daily_blocks_aggregates')
    op.drop_table('w3w_api_key')
    op.drop_table('l2_to_l1_txns')
    op.drop_table('daily_tokens_aggregates')
    op.drop_table('bridge_tokens')
    op.drop_table('daily_wallet_address_stats')
    op.drop_table('actions')
    op.drop_table('linea_batches')
    op.drop_table('l1_state_batches')
    op.drop_table('celestia_da_transactions')
    op.drop_table('l1_to_l2_bridge_transactions')
    op.drop_table('protocol_contracts')
    op.drop_table('defi_contract_daily_detail')
    op.drop_table('nft_increase_config')
    op.drop_table('data_stores')
    op.drop_table('defi_wallet_normal_holds')
    op.drop_table('daily_celestia_da_transactions_aggregates')
    op.alter_column('contracts', 'implementation_contract',
               existing_type=sa.BOOLEAN(),
               type_=postgresql.BYTEA(),
               existing_nullable=True)
    op.alter_column('contracts', 'verified_implementation_contract',
               existing_type=sa.BOOLEAN(),
               type_=postgresql.BYTEA(),
               existing_nullable=True)
    op.alter_column('contracts', 'proxy_standard',
               existing_type=sa.BOOLEAN(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('contracts', 'proxy_standard',
               existing_type=sa.VARCHAR(),
               type_=sa.BOOLEAN(),
               existing_nullable=True)
    op.alter_column('contracts', 'verified_implementation_contract',
               existing_type=postgresql.BYTEA(),
               type_=sa.BOOLEAN(),
               existing_nullable=True)
    op.alter_column('contracts', 'implementation_contract',
               existing_type=postgresql.BYTEA(),
               type_=sa.BOOLEAN(),
               existing_nullable=True)
    op.create_table('daily_celestia_da_transactions_aggregates',
    sa.Column('block_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('total_transaction_fee_on_celestia', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('data_size', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('eth_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('tia_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('celestia_da_fee_usd', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('estimate_ethereum_da_fee_usd', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('block_date', name='daily_celestia_da_transactions_aggregates_pkey')
    )
    op.create_table('defi_wallet_normal_holds',
    sa.Column('wallet_address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('token_address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('day', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('token_balance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('token_symbol', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('price_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('wallet_address', 'token_address', 'day', name='defi_wallet_normal_holds_pkey')
    )
    op.create_table('data_stores',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('store_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('duration_data_store_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_commitment', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('msg_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('init_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expire_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('store_period_length', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('fee', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('confirmer', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('header', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('init_tx_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('init_gas_used', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('init_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('confirmed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('signatory_record', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('confirm_tx_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('confirm_gas_used', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('batch_index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('tx_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('block_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='data_stores_pkey')
    )
    op.create_table('nft_increase_config',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('increase_type', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('value', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='nft_increase_config_pkey')
    )
    op.create_table('defi_contract_daily_detail',
    sa.Column('protocol_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('contract_address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('day', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tvl', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('transaction_count', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('total_transactions', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('native_coin_balance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('native_coin_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('erc20_native_coin_balance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('erc20_native_coin_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('contract_address', 'day', name='defi_contract_daily_detail_pkey')
    )
    op.create_table('protocol_contracts',
    sa.Column('protocol_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('contract_address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('contract_address', name='protocol_contracts_pkey')
    )
    op.create_table('l1_to_l2_bridge_transactions',
    sa.Column('msg_hash', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('version', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l1_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l1_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('l1_block_hash', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l1_transaction_hash', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l1_from_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l1_to_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l2_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l2_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('l2_block_hash', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l2_transaction_hash', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l2_from_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l2_to_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
    sa.Column('from_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('to_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l1_token_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l2_token_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('extra_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('_type', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('msg_hash', name='l1_to_l2_bridge_transactions_pkey')
    )
    op.create_table('celestia_da_transactions',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='celestia_da_transactions_pkey')
    )
    op.create_table('l1_state_batches',
    sa.Column('batch_index', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('previous_total_elements', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('batch_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('l1_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l1_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('l1_block_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l1_transaction_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('extra_data', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('batch_root', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('batch_index', name='l1_state_batches_pkey')
    )
    op.create_table('linea_batches',
    sa.Column('number', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('verify_tx_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('verify_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('blocks', postgresql.ARRAY(sa.BIGINT()), autoincrement=False, nullable=True),
    sa.Column('transactions', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('last_finalized_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('tx_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('block_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('number', name='linea_batches_pkey')
    )
    op.create_table('actions',
    sa.Column('transaction_hash', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('log_index', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('action_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('action_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('block_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('transaction_hash', 'log_index', name='actions_pkey')
    )
    op.create_table('daily_wallet_address_stats',
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('block_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('txn_in_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('txn_out_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('txn_in_value', sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
    sa.Column('txn_out_value', sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
    sa.Column('internal_txn_in_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('internal_txn_out_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('internal_txn_in_value', sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
    sa.Column('internal_txn_out_value', sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
    sa.Column('erc20_transfer_in_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc721_transfer_in_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc1155_transfer_in_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc20_transfer_out_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc721_transfer_out_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc1155_transfer_out_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('txn_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('internal_txn_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc20_transfer_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc721_transfer_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc1155_transfer_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('address', 'block_date', name='daily_wallet_address_stats_pkey')
    )
    op.create_table('bridge_tokens',
    sa.Column('l1_token_address', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('l2_token_address', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('l1_token_address', 'l2_token_address', name='bridge_tokens_pkey')
    )
    op.create_table('daily_tokens_aggregates',
    sa.Column('block_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('erc20_active_address_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc20_total_transfer_cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('erc721_active_address_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc721_total_transfer_cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('erc1155_active_address_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc1155_total_transfer_cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('block_date', name='daily_tokens_aggregates_pkey')
    )
    op.create_table('l2_to_l1_txns',
    sa.Column('index', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('l2_from_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l2_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l2_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('l2_block_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l2_transaction_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l2_token_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l1_from_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l1_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l1_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('l1_block_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l1_transaction_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l1_token_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('from_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('to_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('l1_proven_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l1_proven_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('l1_proven_txn_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l1_finalized_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l1_finalized_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('l1_finalized_txn_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('index', name='l2_to_l1_txns_pkey')
    )
    op.create_table('w3w_api_key',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('display_key', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('encrypt_key', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('authorized_project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('authorized_platform_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='w3w_api_key_pkey')
    )
    op.create_table('daily_blocks_aggregates',
    sa.Column('block_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('avg_size', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('avg_gas_limit', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('avg_gas_used', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_gas_used', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('avg_gas_used_percentage', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('avg_txn_cnt', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('block_interval', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('block_date', name='daily_blocks_aggregates_pkey')
    )
    op.create_table('protocol_liquidity_info',
    sa.Column('protocol_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('protocol_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('deployer_address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('deployer_address', name='protocol_liquidity_info_pkey')
    )
    op.create_table('op_da_transactions',
    sa.Column('hash', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('nonce', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('transaction_index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('from_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('to_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('gas', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('gas_price', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('input', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('receipt_cumulative_gas_used', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('receipt_gas_used', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('receipt_contract_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('receipt_root', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('receipt_status', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('block_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('max_fee_per_gas', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('max_priority_fee_per_gas', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('transaction_type', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('receipt_effective_gas_price', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('receipt_blob_gas_used', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('receipt_blob_gas_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('blob_versioned_hashes', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('hash', name='op_da_transactions_pkey')
    )
    op.create_table('nft_campaign_entry',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('campaign_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('wallet_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('wallet_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('wallet_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('discord_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('twitter_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('telegram_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('retweet_link', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('pass_recaptcha', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_selected', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('pre_selected', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('weight', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_weight', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('entry_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('combined_wallet_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('link_entry_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('custom_input', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['campaign_id'], ['nft_campaign.id'], name='nft_campaign_entry_campaign_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='nft_campaign_entry_pkey')
    )
    op.create_table('daily_transactions_aggregates',
    sa.Column('block_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('total_cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('txn_error_cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('avg_transaction_fee', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('avg_gas_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('max_gas_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('min_gas_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('avg_receipt_l1_fee', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('max_receipt_l1_fee', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('min_receipt_l1_fee', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('avg_receipt_l1_gas_used', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('max_receipt_l1_gas_used', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('min_receipt_l1_gas_used', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('avg_receipt_l1_gas_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('max_receipt_l1_gas_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('min_receipt_l1_gas_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('avg_receipt_l1_fee_scalar', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('max_receipt_l1_fee_scalar', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('min_receipt_l1_fee_scalar', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('block_date', name='daily_transactions_aggregates_pkey')
    )
    op.create_table('defi_wallet_meth_daily_detail',
    sa.Column('wallet_address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('day', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('chain_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('contracts', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('total_meth_balance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_meth_usd', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('wallet_holding_meth_balance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('wallet_holding_meth_usd', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_protocol_meth_balance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_protocol_meth_usd', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('rank', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('wallet_address', 'day', 'chain_name', name='defi_wallet_meth_daily_detail_pkey')
    )
    op.create_table('defi_protocol_meth_level_data',
    sa.Column('protocol_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('day', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('chain_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tvl_usd', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('day_txns', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('total_txns', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('total_native_coin_balance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_native_coin_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_erc20_native_coin_balance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_erc20_native_coin_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_meth_balance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_meth_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('miles_transaction', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('miles_tvl_mnt', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tvl_usd_verified_tokens', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('miles_tvl_verified_tokens', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tvl_usd_mnt', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('tvl_token_count_mnt', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('day_user_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_user_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rank', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('contracts', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('protocol_id', 'day', 'chain_name', name='defi_protocol_meth_level_data_pkey')
    )
    op.create_table('daily_transactions_count',
    sa.Column('day', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('transaction_count', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('day', name='daily_transactions_count_pkey')
    )
    op.create_table('l2_to_l1_bridge_transactions',
    sa.Column('msg_hash', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('version', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l2_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l2_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('l2_block_hash', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l2_transaction_hash', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l2_from_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l2_to_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l1_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l1_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('l1_block_hash', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l1_transaction_hash', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l1_from_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l1_to_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
    sa.Column('from_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('to_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l1_token_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l2_token_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('extra_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('_type', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l1_proven_transaction_hash', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l1_proven_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l1_proven_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('l1_proven_block_hash', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l1_proven_from_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('l1_proven_to_address', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('msg_hash', name='l2_to_l1_bridge_transactions_pkey')
    )
    op.create_table('scheduled_wallet_count_metadata',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('execution_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_data_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='scheduled_wallet_count_metadata_pkey')
    )
    op.create_table('l1_to_l2_txns',
    sa.Column('index', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('l1_from_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l1_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l1_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('l1_block_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l1_transaction_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l1_token_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l2_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l2_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('l2_block_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l2_transaction_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l2_token_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('from_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('to_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('_type', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('index', name='l1_to_l2_txns_pkey')
    )
    op.create_table('op_bedrock_state_batches',
    sa.Column('batch_index', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('l1_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('l1_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('l1_block_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('l1_transaction_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('start_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('end_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('batch_root', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('transaction_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('block_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('batch_index', name='op_bedrock_state_batches_pkey')
    )
    op.create_table('mantle_batches',
    sa.Column('index', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('data_store_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('upgrade_data_store_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('data_store_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('confirm_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('index', name='mantle_batches_pkey')
    )
    op.create_table('data_store_tx_mapping',
    sa.Column('data_store_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('index', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('transaction_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('data_store_id', 'index', name='data_store_tx_mapping_pkey')
    )
    op.create_table('scheduled_token_count_metadata',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('execution_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_data_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='scheduled_token_count_metadata_pkey')
    )
    op.create_table('defi_contract_daily_detail_1',
    sa.Column('protocol_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('contract_address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('day', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tvl', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('transaction_count', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('total_transactions', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('native_coin_balance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('native_coin_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('erc20_native_coin_balance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('erc20_native_coin_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('contract_address', 'day', name='defi_contract_daily_detail_1_pkey')
    )
    op.create_table('nft_campaign_challenge',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('campaign_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('challenge_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('challenge_input', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('check_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('display', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('at_accounts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('hashtags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('roles', postgresql.ARRAY(sa.BIGINT()), autoincrement=False, nullable=True),
    sa.Column('discord_server_guild_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['campaign_id'], ['nft_campaign.id'], name='nft_campaign_challenge_campaign_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='nft_campaign_challenge_pkey')
    )
    op.create_table('zkevm_batches',
    sa.Column('batch_index', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('coinbase', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('state_root', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('global_exit_root', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('mainnet_exit_root', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('rollup_exit_root', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('local_exit_root', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('acc_input_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('transactions', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('blocks', postgresql.ARRAY(sa.BIGINT()), autoincrement=False, nullable=True),
    sa.Column('start_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('end_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('block_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transaction_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sequence_batch_tx_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sequence_batch_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('sequence_batch_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('verify_batch_tx_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('verify_batch_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('verify_batch_block_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('send_sequences_tx_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('batch_index', name='zkevm_batches_pkey')
    )
    op.create_table('daily_da_transactions_aggregates',
    sa.Column('block_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('total_transaction_fee_on_l2', sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
    sa.Column('total_l1_transaction_fee_on_l2', sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
    sa.Column('total_transaction_fee_on_l1', sa.NUMERIC(precision=100, scale=0), autoincrement=False, nullable=True),
    sa.Column('data_size', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('eth_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('tia_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_transaction_fee_on_l2_usd', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_l1_transaction_fee_on_l2_usd', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_transaction_fee_on_l1_usd', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('estimate_celestia_da_fee_usd', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('block_date', name='daily_da_transactions_aggregates_pkey')
    )
    op.create_table('nft_campaign',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('slug', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('images', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sales_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('required_social_media', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('require_retweet', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('require_wallet', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('chain', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('supported_wallet', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('resource', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('collection_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('group_ids', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('referral_campaign_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('raffle_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cohost_project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('allow_duplicate_social', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('notified_discord_servers', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('winner_selection_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('socialscan_badge_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='nft_campaign_pkey')
    )
    op.create_table('defi_protocol_level_data',
    sa.Column('protocol_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('day', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tvl_usd', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('day_txns', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('total_txns', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('total_native_coin_balance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_native_coin_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_erc20_native_coin_balance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_erc20_native_coin_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('miles_transaction', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('miles_tvl_mnt', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('tvl_usd_verified_tokens', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('tvl_token_count_mnt', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('tvl_usd_mnt', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('miles_tvl_verified_tokens', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('protocol_id', 'day', name='defi_protocol_level_data_pkey')
    )
    op.create_table('defi_wallet_protocol_daily_detail',
    sa.Column('protocol_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('wallet_address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('day', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('txn', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_txn', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_asset_usd', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('contracts', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('protocol_id', 'wallet_address', 'day', name='defi_wallet_protocol_daily_detail_pkey')
    )
    op.create_table('defi_wallet_protocol_transfer_rules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('protocol_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('contract_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('chain_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('all_contracts', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='defi_wallet_protocol_transfer_rules_pkey')
    )
    op.create_table('wallet_addresses',
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('txn_in_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('txn_out_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('txn_in_value', sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
    sa.Column('txn_out_value', sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
    sa.Column('internal_txn_in_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('internal_txn_out_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('internal_txn_in_value', sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
    sa.Column('internal_txn_out_value', sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
    sa.Column('erc20_transfer_in_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc721_transfer_in_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc1155_transfer_in_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc20_transfer_out_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc721_transfer_out_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc1155_transfer_out_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('txn_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('internal_txn_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc20_transfer_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc721_transfer_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erc1155_transfer_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deposit_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('withdraw_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tag', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('address', name='wallet_addresses_pkey')
    )
    op.create_table('daily_bridge_transactions_aggregates',
    sa.Column('block_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('deposit_cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('withdraw_cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('block_date', name='daily_bridge_transactions_aggregates_pkey')
    )
    op.create_table('daily_addresses_aggregates',
    sa.Column('block_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('active_address_cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('receiver_address_cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('sender_address_cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('total_address_cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('new_address_cnt', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('block_date', name='daily_addresses_aggregates_pkey')
    )
    # ### end Alembic commands ###
