"""add contract_internal_transactions table

Revision ID: 18303175d873
Revises: 96bccfafdb77
Create Date: 2024-05-31 15:14:41.353351

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '18303175d873'
down_revision: Union[str, None] = '96bccfafdb77'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('contract_internal_transactions',
    sa.Column('trace_id', sa.VARCHAR(), nullable=False),
    sa.Column('from_address', postgresql.BYTEA(), nullable=True),
    sa.Column('to_address', postgresql.BYTEA(), nullable=True),
    sa.Column('value', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('trace_type', sa.VARCHAR(), nullable=True),
    sa.Column('call_type', sa.VARCHAR(), nullable=True),
    sa.Column('gas', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('gas_used', sa.NUMERIC(precision=100), nullable=True),
    sa.Column('trace_address', postgresql.ARRAY(sa.INTEGER()), nullable=True),
    sa.Column('error', sa.TEXT(), nullable=True),
    sa.Column('status', sa.INTEGER(), nullable=True),
    sa.Column('block_number', sa.BIGINT(), nullable=True),
    sa.Column('block_hash', postgresql.BYTEA(), nullable=True),
    sa.Column('block_timestamp', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('transaction_index', sa.INTEGER(), nullable=True),
    sa.Column('transaction_hash', postgresql.BYTEA(), nullable=True),
    sa.Column('create_time', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('update_time', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('trace_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('contract_internal_transactions')
    # ### end Alembic commands ###
