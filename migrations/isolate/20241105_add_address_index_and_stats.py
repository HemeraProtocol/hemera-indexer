"""add_address_index_and_stats

Revision ID: 872094559593
Revises: bc23aa19668e
Create Date: 2024-11-05 13:34:30.692977

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "872094559593"
down_revision: Union[str, None] = "bc23aa19668e"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "address_contract_operations",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("trace_from_address", postgresql.BYTEA(), nullable=True),
        sa.Column("contract_address", postgresql.BYTEA(), nullable=True),
        sa.Column("trace_id", sa.TEXT(), nullable=False),
        sa.Column("block_number", sa.INTEGER(), nullable=False),
        sa.Column("transaction_index", sa.INTEGER(), nullable=False),
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("block_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("error", sa.TEXT(), nullable=True),
        sa.Column("status", sa.INTEGER(), nullable=True),
        sa.Column("creation_code", postgresql.BYTEA(), nullable=True),
        sa.Column("deployed_code", postgresql.BYTEA(), nullable=True),
        sa.Column("gas", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("gas_used", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("trace_type", sa.TEXT(), nullable=True),
        sa.Column("call_type", sa.TEXT(), nullable=True),
        sa.Column("transaction_receipt_status", sa.INTEGER(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address", "trace_id", "block_number", "transaction_index", "block_timestamp"),
    )
    op.create_index(
        "address_contract_operations_address_block_tn_t_idx",
        "address_contract_operations",
        ["address", sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
    )
    op.create_table(
        "address_internal_transactions",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("trace_id", sa.TEXT(), nullable=False),
        sa.Column("block_number", sa.INTEGER(), nullable=False),
        sa.Column("transaction_index", sa.INTEGER(), nullable=False),
        sa.Column("transaction_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("block_timestamp", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("block_hash", postgresql.BYTEA(), nullable=True),
        sa.Column("error", sa.TEXT(), nullable=True),
        sa.Column("status", sa.INTEGER(), nullable=True),
        sa.Column("input_method", sa.TEXT(), nullable=True),
        sa.Column("value", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("gas", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("gas_used", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("trace_type", sa.TEXT(), nullable=True),
        sa.Column("call_type", sa.TEXT(), nullable=True),
        sa.Column("txn_type", sa.SMALLINT(), nullable=True),
        sa.Column("related_address", postgresql.BYTEA(), nullable=True),
        sa.Column("transaction_receipt_status", sa.INTEGER(), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("address", "trace_id", "block_number", "transaction_index", "block_timestamp"),
    )
    op.create_index(
        "address_internal_transactions_address_nt_t_idx",
        "address_internal_transactions",
        ["address", sa.text("block_timestamp DESC"), sa.text("block_number DESC"), sa.text("transaction_index DESC")],
        unique=False,
    )
    op.create_table(
        "af_erc1155_token_holdings_current",
        sa.Column("position_token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_id", sa.NUMERIC(precision=100), nullable=False),
        sa.Column("wallet_address", postgresql.BYTEA(), nullable=False),
        sa.Column("block_number", sa.BIGINT(), nullable=True),
        sa.Column("block_timestamp", sa.BIGINT(), nullable=True),
        sa.Column("balance", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("position_token_address", "token_id", "wallet_address"),
    )
    op.create_index(
        "af_erc1155_token_holdings_current_token_block_desc_index",
        "af_erc1155_token_holdings_current",
        [sa.text("position_token_address DESC"), sa.text("block_timestamp DESC")],
        unique=False,
    )
    op.create_index(
        "af_erc1155_token_holdings_current_wallet_block_desc_index",
        "af_erc1155_token_holdings_current",
        [sa.text("wallet_address DESC"), sa.text("block_timestamp DESC")],
        unique=False,
    )
    op.create_table(
        "af_erc1155_token_holdings_hist",
        sa.Column("position_token_address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_id", sa.NUMERIC(precision=100), nullable=False),
        sa.Column("wallet_address", postgresql.BYTEA(), nullable=False),
        sa.Column("balance", sa.NUMERIC(precision=100), nullable=True),
        sa.Column("block_number", sa.BIGINT(), nullable=False),
        sa.Column("block_timestamp", sa.BIGINT(), nullable=False),
        sa.Column("create_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), server_default=sa.text("now()"), nullable=True),
        sa.Column("reorg", sa.BOOLEAN(), nullable=True),
        sa.PrimaryKeyConstraint(
            "position_token_address", "token_id", "wallet_address", "block_timestamp", "block_number"
        ),
    )
    op.create_index(
        "feature_erc1155_token_holding_token_block_desc_index",
        "af_erc1155_token_holdings_hist",
        [sa.text("position_token_address DESC"), sa.text("block_timestamp DESC")],
        unique=False,
    )
    op.create_index(
        "feature_erc1155_token_holding_token_wallet_block_desc_index",
        "af_erc1155_token_holdings_hist",
        [sa.text("position_token_address DESC"), sa.text("wallet_address DESC"), sa.text("block_number DESC")],
        unique=False,
    )
    op.create_table(
        "af_index_daily_stats",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("block_date", sa.DATE(), nullable=False),
        sa.Column("transaction_in_count", sa.INTEGER(), nullable=True),
        sa.Column("transaction_out_count", sa.INTEGER(), nullable=True),
        sa.Column("transaction_self_count", sa.INTEGER(), nullable=True),
        sa.Column("transaction_in_value", sa.BIGINT(), nullable=True),
        sa.Column("transaction_out_value", sa.BIGINT(), nullable=True),
        sa.Column("transaction_self_value", sa.BIGINT(), nullable=True),
        sa.Column("transaction_in_fee", sa.NUMERIC(), nullable=True),
        sa.Column("transaction_out_fee", sa.NUMERIC(), nullable=True),
        sa.Column("transaction_self_fee", sa.NUMERIC(), nullable=True),
        sa.Column("internal_transaction_in_count", sa.INTEGER(), nullable=True),
        sa.Column("internal_transaction_out_count", sa.INTEGER(), nullable=True),
        sa.Column("internal_transaction_self_count", sa.INTEGER(), nullable=True),
        sa.Column("internal_transaction_in_value", sa.BIGINT(), nullable=True),
        sa.Column("internal_transaction_out_value", sa.BIGINT(), nullable=True),
        sa.Column("internal_transaction_self_value", sa.BIGINT(), nullable=True),
        sa.Column("erc20_transfer_in_count", sa.INTEGER(), nullable=True),
        sa.Column("erc20_transfer_out_count", sa.INTEGER(), nullable=True),
        sa.Column("erc20_transfer_self_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_transfer_in_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_transfer_out_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_transfer_self_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_721_transfer_in_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_721_transfer_out_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_721_transfer_self_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_1155_transfer_in_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_1155_transfer_out_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_1155_transfer_self_count", sa.INTEGER(), nullable=True),
        sa.Column("contract_creation_count", sa.INTEGER(), nullable=True),
        sa.Column("contract_destruction_count", sa.INTEGER(), nullable=True),
        sa.Column("contract_operation_count", sa.INTEGER(), nullable=True),
        sa.Column("transaction_count", sa.INTEGER(), nullable=True),
        sa.Column("internal_transaction_count", sa.INTEGER(), nullable=True),
        sa.Column("erc20_transfer_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_transfer_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_721_transfer_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_1155_transfer_count", sa.INTEGER(), nullable=True),
        sa.PrimaryKeyConstraint("address", "block_date"),
    )
    op.create_table(
        "af_index_na_scheduled_metadata",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("dag_id", sa.VARCHAR(), nullable=True),
        sa.Column("execution_date", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("last_data_timestamp", postgresql.TIMESTAMP(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "af_index_stats",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("transaction_in_count", sa.INTEGER(), nullable=True),
        sa.Column("transaction_out_count", sa.INTEGER(), nullable=True),
        sa.Column("transaction_self_count", sa.INTEGER(), nullable=True),
        sa.Column("transaction_in_value", sa.NUMERIC(), nullable=True),
        sa.Column("transaction_out_value", sa.NUMERIC(), nullable=True),
        sa.Column("transaction_self_value", sa.NUMERIC(), nullable=True),
        sa.Column("transaction_in_fee", sa.NUMERIC(), nullable=True),
        sa.Column("transaction_out_fee", sa.NUMERIC(), nullable=True),
        sa.Column("transaction_self_fee", sa.NUMERIC(), nullable=True),
        sa.Column("internal_transaction_in_count", sa.INTEGER(), nullable=True),
        sa.Column("internal_transaction_out_count", sa.INTEGER(), nullable=True),
        sa.Column("internal_transaction_self_count", sa.INTEGER(), nullable=True),
        sa.Column("internal_transaction_in_value", sa.NUMERIC(), nullable=True),
        sa.Column("internal_transaction_out_value", sa.NUMERIC(), nullable=True),
        sa.Column("internal_transaction_self_value", sa.NUMERIC(), nullable=True),
        sa.Column("erc20_transfer_in_count", sa.INTEGER(), nullable=True),
        sa.Column("erc20_transfer_out_count", sa.INTEGER(), nullable=True),
        sa.Column("erc20_transfer_self_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_transfer_in_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_transfer_out_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_transfer_self_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_721_transfer_in_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_721_transfer_out_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_721_transfer_self_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_1155_transfer_in_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_1155_transfer_out_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_1155_transfer_self_count", sa.INTEGER(), nullable=True),
        sa.Column("contract_creation_count", sa.INTEGER(), nullable=True),
        sa.Column("contract_destruction_count", sa.INTEGER(), nullable=True),
        sa.Column("contract_operation_count", sa.INTEGER(), nullable=True),
        sa.Column("transaction_count", sa.INTEGER(), nullable=True),
        sa.Column("internal_transaction_count", sa.INTEGER(), nullable=True),
        sa.Column("erc20_transfer_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_transfer_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_721_transfer_count", sa.INTEGER(), nullable=True),
        sa.Column("nft_1155_transfer_count", sa.INTEGER(), nullable=True),
        sa.Column("tag", sa.VARCHAR(), nullable=True),
        sa.PrimaryKeyConstraint("address"),
    )
    op.create_table(
        "af_index_token_address_daily_stats",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_holder_count", sa.INTEGER(), nullable=True),
        sa.Column("token_transfer_count", sa.INTEGER(), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), nullable=True),
        sa.PrimaryKeyConstraint("address"),
    )
    op.create_table(
        "af_index_token_address_stats",
        sa.Column("address", postgresql.BYTEA(), nullable=False),
        sa.Column("token_holder_count", sa.INTEGER(), nullable=True),
        sa.Column("token_transfer_count", sa.INTEGER(), nullable=True),
        sa.Column("update_time", postgresql.TIMESTAMP(), nullable=True),
        sa.PrimaryKeyConstraint("address"),
    )
    op.create_table(
        "af_stats_na_daily_addresses",
        sa.Column("block_date", sa.DATE(), nullable=False),
        sa.Column("active_address_cnt", sa.BIGINT(), nullable=True),
        sa.Column("receiver_address_cnt", sa.BIGINT(), nullable=True),
        sa.Column("sender_address_cnt", sa.BIGINT(), nullable=True),
        sa.Column("total_address_cnt", sa.BIGINT(), nullable=True),
        sa.Column("new_address_cnt", sa.BIGINT(), nullable=True),
        sa.PrimaryKeyConstraint("block_date"),
    )
    op.create_table(
        "af_stats_na_daily_blocks",
        sa.Column("block_date", sa.DATE(), nullable=False),
        sa.Column("cnt", sa.BIGINT(), nullable=True),
        sa.Column("avg_size", sa.NUMERIC(), nullable=True),
        sa.Column("avg_gas_limit", sa.NUMERIC(), nullable=True),
        sa.Column("avg_gas_used", sa.NUMERIC(), nullable=True),
        sa.Column("total_gas_used", sa.BIGINT(), nullable=True),
        sa.Column("avg_gas_used_percentage", sa.NUMERIC(), nullable=True),
        sa.Column("avg_txn_cnt", sa.NUMERIC(), nullable=True),
        sa.Column("total_cnt", sa.BIGINT(), nullable=True),
        sa.Column("block_interval", sa.NUMERIC(), nullable=True),
        sa.PrimaryKeyConstraint("block_date"),
    )
    op.create_table(
        "af_stats_na_daily_bridge_transactions",
        sa.Column("block_date", sa.DATE(), nullable=False),
        sa.Column("deposit_cnt", sa.BIGINT(), nullable=True),
        sa.Column("withdraw_cnt", sa.BIGINT(), nullable=True),
        sa.PrimaryKeyConstraint("block_date"),
    )
    op.create_table(
        "af_stats_na_daily_tokens",
        sa.Column("block_date", sa.DATE(), nullable=False),
        sa.Column("erc20_active_address_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc20_total_transfer_cnt", sa.BIGINT(), nullable=True),
        sa.Column("erc721_active_address_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc721_total_transfer_cnt", sa.BIGINT(), nullable=True),
        sa.Column("erc1155_active_address_cnt", sa.INTEGER(), nullable=True),
        sa.Column("erc1155_total_transfer_cnt", sa.BIGINT(), nullable=True),
        sa.PrimaryKeyConstraint("block_date"),
    )
    op.create_table(
        "af_stats_na_daily_transactions",
        sa.Column("block_date", sa.DATE(), nullable=False),
        sa.Column("cnt", sa.BIGINT(), nullable=True),
        sa.Column("total_cnt", sa.BIGINT(), nullable=True),
        sa.Column("txn_error_cnt", sa.BIGINT(), nullable=True),
        sa.Column("avg_transaction_fee", sa.NUMERIC(), nullable=True),
        sa.Column("avg_gas_price", sa.NUMERIC(), nullable=True),
        sa.Column("max_gas_price", sa.NUMERIC(), nullable=True),
        sa.Column("min_gas_price", sa.NUMERIC(), nullable=True),
        sa.Column("avg_receipt_l1_fee", sa.NUMERIC(), nullable=True),
        sa.Column("max_receipt_l1_fee", sa.NUMERIC(), nullable=True),
        sa.Column("min_receipt_l1_fee", sa.NUMERIC(), nullable=True),
        sa.Column("avg_receipt_l1_gas_price", sa.NUMERIC(), nullable=True),
        sa.Column("max_receipt_l1_gas_price", sa.NUMERIC(), nullable=True),
        sa.Column("min_receipt_l1_gas_price", sa.NUMERIC(), nullable=True),
        sa.PrimaryKeyConstraint("block_date"),
    )
    op.create_table(
        "coin_prices",
        sa.Column("block_date", sa.DateTime(), nullable=False),
        sa.Column("price", sa.Numeric(), nullable=True),
        sa.PrimaryKeyConstraint("block_date"),
    )
    op.create_table(
        "scheduled_metadata",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("dag_id", sa.VARCHAR(), nullable=True),
        sa.Column("execution_date", sa.DateTime(), nullable=True),
        sa.Column("last_data_timestamp", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_table("daily_wallet_addresses_aggregates")
    op.drop_table("daily_addresses_aggregates")
    op.drop_table("daily_blocks_aggregates")
    op.drop_table("daily_tokens_aggregates")
    op.drop_table("scheduled_token_count_metadata")
    op.drop_table("scheduled_wallet_count_metadata")
    op.drop_table("daily_contract_interacted_aggregates")
    op.drop_table("daily_transactions_aggregates")
    op.drop_table("statistics_wallet_addresses")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "statistics_wallet_addresses",
        sa.Column("address", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("txn_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("txn_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("txn_in_value", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("txn_out_value", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("internal_txn_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("internal_txn_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("internal_txn_in_value", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("internal_txn_out_value", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("erc20_transfer_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc721_transfer_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc1155_transfer_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc20_transfer_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc721_transfer_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc1155_transfer_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("txn_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("internal_txn_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc20_transfer_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc721_transfer_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc1155_transfer_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("deposit_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("withdraw_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("tag", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("address", name="statistics_wallet_addresses_pkey"),
    )
    op.create_table(
        "daily_transactions_aggregates",
        sa.Column("block_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("cnt", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("total_cnt", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("txn_error_cnt", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("avg_transaction_fee", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("avg_gas_price", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("max_gas_price", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("min_gas_price", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("avg_receipt_l1_fee", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("max_receipt_l1_fee", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("min_receipt_l1_fee", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("avg_receipt_l1_gas_used", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("max_receipt_l1_gas_used", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("min_receipt_l1_gas_used", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("avg_receipt_l1_gas_price", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("max_receipt_l1_gas_price", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("min_receipt_l1_gas_price", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("avg_receipt_l1_fee_scalar", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("max_receipt_l1_fee_scalar", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("min_receipt_l1_fee_scalar", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("block_date", name="daily_transactions_aggregates_pkey"),
    )
    op.create_table(
        "daily_contract_interacted_aggregates",
        sa.Column("block_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("from_address", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("to_address", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("contract_interacted_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint(
            "block_date", "from_address", "to_address", name="daily_contract_interacted_aggregates_pkey"
        ),
    )
    op.create_table(
        "scheduled_wallet_count_metadata",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("dag_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("execution_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("last_data_timestamp", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="scheduled_wallet_count_metadata_pkey"),
    )
    op.create_table(
        "scheduled_token_count_metadata",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("dag_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("execution_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("last_data_timestamp", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="scheduled_token_count_metadata_pkey"),
    )
    op.create_table(
        "daily_tokens_aggregates",
        sa.Column("block_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("erc20_active_address_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc20_total_transfer_cnt", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("erc721_active_address_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc721_total_transfer_cnt", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("erc1155_active_address_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc1155_total_transfer_cnt", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("block_date", name="daily_tokens_aggregates_pkey"),
    )
    op.create_table(
        "daily_blocks_aggregates",
        sa.Column("block_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("cnt", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("avg_size", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("avg_gas_limit", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("avg_gas_used", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("total_gas_used", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("avg_gas_used_percentage", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("avg_txn_cnt", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("total_cnt", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("block_interval", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("block_date", name="daily_blocks_aggregates_pkey"),
    )
    op.create_table(
        "daily_addresses_aggregates",
        sa.Column("block_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("active_address_cnt", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("receiver_address_cnt", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("sender_address_cnt", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("total_address_cnt", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("new_address_cnt", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("block_date", name="daily_addresses_aggregates_pkey"),
    )
    op.create_table(
        "daily_wallet_addresses_aggregates",
        sa.Column("address", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("block_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("txn_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("txn_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("txn_in_value", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("txn_out_value", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("internal_txn_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("internal_txn_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("internal_txn_in_value", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("internal_txn_out_value", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("erc20_transfer_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc721_transfer_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc1155_transfer_in_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc20_transfer_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc721_transfer_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("erc1155_transfer_out_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "internal_txn_cnt",
            sa.INTEGER(),
            sa.Computed("(internal_txn_in_cnt + internal_txn_out_cnt)", persisted=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "erc20_transfer_cnt",
            sa.INTEGER(),
            sa.Computed("(erc20_transfer_in_cnt + erc20_transfer_out_cnt)", persisted=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "erc721_transfer_cnt",
            sa.INTEGER(),
            sa.Computed("(erc721_transfer_in_cnt + erc721_transfer_out_cnt)", persisted=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "erc1155_transfer_cnt",
            sa.INTEGER(),
            sa.Computed("(erc1155_transfer_in_cnt + erc1155_transfer_out_cnt)", persisted=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("txn_self_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("txn_in_error_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("txn_out_error_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("txn_self_error_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "txn_cnt",
            sa.INTEGER(),
            sa.Computed("((txn_in_cnt + txn_out_cnt) - txn_self_cnt)", persisted=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("deposit_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("withdraw_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("gas_in_used", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("l2_txn_in_fee", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("l1_txn_in_fee", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("txn_in_fee", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("gas_out_used", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("l2_txn_out_fee", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("l1_txn_out_fee", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("txn_out_fee", sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
        sa.Column("contract_deployed_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("from_address_unique_interacted_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("to_address_unique_interacted_cnt", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("address", "block_date", name="daily_wallet_addresses_aggregates_pkey"),
    )
    op.drop_table("scheduled_metadata")
    op.drop_table("coin_prices")
    op.drop_table("af_stats_na_daily_transactions")
    op.drop_table("af_stats_na_daily_tokens")
    op.drop_table("af_stats_na_daily_bridge_transactions")
    op.drop_table("af_stats_na_daily_blocks")
    op.drop_table("af_stats_na_daily_addresses")
    op.drop_table("af_index_token_address_stats")
    op.drop_table("af_index_token_address_daily_stats")
    op.drop_table("af_index_stats")
    op.drop_table("af_index_na_scheduled_metadata")
    op.drop_table("af_index_daily_stats")
    op.drop_index(
        "feature_erc1155_token_holding_token_wallet_block_desc_index", table_name="af_erc1155_token_holdings_hist"
    )
    op.drop_index("feature_erc1155_token_holding_token_block_desc_index", table_name="af_erc1155_token_holdings_hist")
    op.drop_table("af_erc1155_token_holdings_hist")
    op.drop_index(
        "af_erc1155_token_holdings_current_wallet_block_desc_index", table_name="af_erc1155_token_holdings_current"
    )
    op.drop_index(
        "af_erc1155_token_holdings_current_token_block_desc_index", table_name="af_erc1155_token_holdings_current"
    )
    op.drop_table("af_erc1155_token_holdings_current")
    op.drop_index("address_internal_transactions_address_nt_t_idx", table_name="address_internal_transactions")
    op.drop_table("address_internal_transactions")
    op.drop_index("address_contract_operations_address_block_tn_t_idx", table_name="address_contract_operations")
    op.drop_table("address_contract_operations")
    # ### end Alembic commands ###
